// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: games/v1/game.proto

package games

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Seasons a game can be in
type Season int32

const (
	Season_NONE   Season = 0
	Season_WINTER Season = 1
	Season_SUMMER Season = 2
)

// Enum value maps for Season.
var (
	Season_name = map[int32]string{
		0: "NONE",
		1: "WINTER",
		2: "SUMMER",
	}
	Season_value = map[string]int32{
		"NONE":   0,
		"WINTER": 1,
		"SUMMER": 2,
	}
)

func (x Season) Enum() *Season {
	p := new(Season)
	*p = x
	return p
}

func (x Season) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Season) Descriptor() protoreflect.EnumDescriptor {
	return file_games_v1_game_proto_enumTypes[0].Descriptor()
}

func (Season) Type() protoreflect.EnumType {
	return &file_games_v1_game_proto_enumTypes[0]
}

func (x Season) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Season.Descriptor instead.
func (Season) EnumDescriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{0}
}

// Fields we can sort Games by
type SortField int32

const (
	SortField_CREATE_DATE SortField = 0
	SortField_UPDATE_DATE SortField = 1
	SortField_DELETE_DATE SortField = 2
	SortField_LOCATION    SortField = 3
)

// Enum value maps for SortField.
var (
	SortField_name = map[int32]string{
		0: "CREATE_DATE",
		1: "UPDATE_DATE",
		2: "DELETE_DATE",
		3: "LOCATION",
	}
	SortField_value = map[string]int32{
		"CREATE_DATE": 0,
		"UPDATE_DATE": 1,
		"DELETE_DATE": 2,
		"LOCATION":    3,
	}
)

func (x SortField) Enum() *SortField {
	p := new(SortField)
	*p = x
	return p
}

func (x SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_games_v1_game_proto_enumTypes[1].Descriptor()
}

func (SortField) Type() protoreflect.EnumType {
	return &file_games_v1_game_proto_enumTypes[1]
}

func (x SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortField.Descriptor instead.
func (SortField) EnumDescriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{1}
}

// The type of sort to apply, ascending or descending
type SortDirection int32

const (
	SortDirection_ASC SortDirection = 0
	SortDirection_DSC SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "ASC",
		1: "DSC",
	}
	SortDirection_value = map[string]int32{
		"ASC": 0,
		"DSC": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_games_v1_game_proto_enumTypes[2].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_games_v1_game_proto_enumTypes[2]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{2}
}

// Field mapping used in validation errors
type Field int32

const (
	Field_GameId        Field = 0
	Field_GameSlug      Field = 1
	Field_GameLocation  Field = 2
	Field_GameSeason    Field = 3
	Field_GameActive    Field = 4
	Field_GamePromoted  Field = 5
	Field_GameStartDate Field = 6
	Field_GameEndDate   Field = 7
	Field_GameLogo      Field = 8
	Field_GameBlurb     Field = 9
)

// Enum value maps for Field.
var (
	Field_name = map[int32]string{
		0: "GameId",
		1: "GameSlug",
		2: "GameLocation",
		3: "GameSeason",
		4: "GameActive",
		5: "GamePromoted",
		6: "GameStartDate",
		7: "GameEndDate",
		8: "GameLogo",
		9: "GameBlurb",
	}
	Field_value = map[string]int32{
		"GameId":        0,
		"GameSlug":      1,
		"GameLocation":  2,
		"GameSeason":    3,
		"GameActive":    4,
		"GamePromoted":  5,
		"GameStartDate": 6,
		"GameEndDate":   7,
		"GameLogo":      8,
		"GameBlurb":     9,
	}
)

func (x Field) Enum() *Field {
	p := new(Field)
	*p = x
	return p
}

func (x Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field) Descriptor() protoreflect.EnumDescriptor {
	return file_games_v1_game_proto_enumTypes[3].Descriptor()
}

func (Field) Type() protoreflect.EnumType {
	return &file_games_v1_game_proto_enumTypes[3]
}

func (x Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field.Descriptor instead.
func (Field) EnumDescriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{3}
}

// Error Codes returned as part of validation errors
type ErrorCode int32

const (
	// Generic error codes
	ErrorCode_Required      ErrorCode = 0
	ErrorCode_InvalidUUIDv4 ErrorCode = 1
	ErrorCode_InvalidURI    ErrorCode = 2
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "Required",
		1: "InvalidUUIDv4",
		2: "InvalidURI",
	}
	ErrorCode_value = map[string]int32{
		"Required":      0,
		"InvalidUUIDv4": 1,
		"InvalidURI":    2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_games_v1_game_proto_enumTypes[4].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_games_v1_game_proto_enumTypes[4]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{4}
}

// A Game stored in the content service
type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug       string               `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	CreateDate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	UpdateDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	DeleteDate *timestamp.Timestamp `protobuf:"bytes,5,opt,name=delete_date,json=deleteDate,proto3" json:"delete_date,omitempty"`
	Location   string               `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Season     Season               `protobuf:"varint,7,opt,name=season,proto3,enum=paralympics.games.v1.Season" json:"season,omitempty"`
	Active     bool                 `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
	Promoted   bool                 `protobuf:"varint,9,opt,name=promoted,proto3" json:"promoted,omitempty"`
	StartDate  *timestamp.Timestamp `protobuf:"bytes,10,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamp.Timestamp `protobuf:"bytes,11,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Logo       string               `protobuf:"bytes,12,opt,name=logo,proto3" json:"logo,omitempty"`
	Blurb      string               `protobuf:"bytes,13,opt,name=blurb,proto3" json:"blurb,omitempty"`
}

func (x *Game) Reset() {
	*x = Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{0}
}

func (x *Game) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Game) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Game) GetCreateDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *Game) GetUpdateDate() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *Game) GetDeleteDate() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteDate
	}
	return nil
}

func (x *Game) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Game) GetSeason() Season {
	if x != nil {
		return x.Season
	}
	return Season_NONE
}

func (x *Game) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Game) GetPromoted() bool {
	if x != nil {
		return x.Promoted
	}
	return false
}

func (x *Game) GetStartDate() *timestamp.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Game) GetEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Game) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Game) GetBlurb() string {
	if x != nil {
		return x.Blurb
	}
	return ""
}

// Sort field + sort direction
type SortOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     SortField     `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.games.v1.SortField" json:"field,omitempty"`
	Direction SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=paralympics.games.v1.SortDirection" json:"direction,omitempty"`
}

func (x *SortOption) Reset() {
	*x = SortOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOption) ProtoMessage() {}

func (x *SortOption) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOption.ProtoReflect.Descriptor instead.
func (*SortOption) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{1}
}

func (x *SortOption) GetField() SortField {
	if x != nil {
		return x.Field
	}
	return SortField_CREATE_DATE
}

func (x *SortOption) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_ASC
}

// Fields we can filter games by
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active   bool   `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`                                  // Search by active state
	Promoted bool   `protobuf:"varint,2,opt,name=promoted,proto3" json:"promoted,omitempty"`                              // Search by promoted state
	Season   Season `protobuf:"varint,3,opt,name=season,proto3,enum=paralympics.games.v1.Season" json:"season,omitempty"` // Search by game season
	Deleted  bool   `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`                                // List deleted games
	Location string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`                               // Search by location - not a fuzzy search
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{2}
}

func (x *Filter) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Filter) GetPromoted() bool {
	if x != nil {
		return x.Promoted
	}
	return false
}

func (x *Filter) GetSeason() Season {
	if x != nil {
		return x.Season
	}
	return Season_NONE
}

func (x *Filter) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Filter) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Request for the `GameByID` method
type GameByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GameByIDRequest) Reset() {
	*x = GameByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameByIDRequest) ProtoMessage() {}

func (x *GameByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameByIDRequest.ProtoReflect.Descriptor instead.
func (*GameByIDRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{3}
}

func (x *GameByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request for the `GameBySlug` method
type GameBySlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *GameBySlugRequest) Reset() {
	*x = GameBySlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBySlugRequest) ProtoMessage() {}

func (x *GameBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBySlugRequest.ProtoReflect.Descriptor instead.
func (*GameBySlugRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{4}
}

func (x *GameBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

// Pagination
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{5}
}

func (x *Pagination) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Get paginaged list of Games
type ListGamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination   `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"` // Paginated response
	Sort       []*SortOption `protobuf:"bytes,2,rep,name=sort,proto3" json:"sort,omitempty"`             // Sort response
	Filter     *Filter       `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`         // Filter Games
}

func (x *ListGamesRequest) Reset() {
	*x = ListGamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGamesRequest) ProtoMessage() {}

func (x *ListGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGamesRequest.ProtoReflect.Descriptor instead.
func (*ListGamesRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{6}
}

func (x *ListGamesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListGamesRequest) GetSort() []*SortOption {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListGamesRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Response for ListGames
type ListGamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*Game `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	Total int64   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // Total number of games that match the search
}

func (x *ListGamesResponse) Reset() {
	*x = ListGamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGamesResponse) ProtoMessage() {}

func (x *ListGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGamesResponse.ProtoReflect.Descriptor instead.
func (*ListGamesResponse) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{7}
}

func (x *ListGamesResponse) GetGames() []*Game {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *ListGamesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Field Validation Error
type FieldError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field the error occured on
	Field Field `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.games.v1.Field" json:"field,omitempty"`
	// Error that occured
	Code ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=paralympics.games.v1.ErrorCode" json:"code,omitempty"`
}

func (x *FieldError) Reset() {
	*x = FieldError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldError) ProtoMessage() {}

func (x *FieldError) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldError.ProtoReflect.Descriptor instead.
func (*FieldError) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{8}
}

func (x *FieldError) GetField() Field {
	if x != nil {
		return x.Field
	}
	return Field_GameId
}

func (x *FieldError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_Required
}

// Validation error response messages
type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Validation errors that occured
	Errors []*FieldError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{9}
}

func (x *ValidationError) GetErrors() []*FieldError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Request for [ActiveGames](paralympics.games.v1.GameManger.ActiveGames)
type ActiveGamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActiveGamesRequest) Reset() {
	*x = ActiveGamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveGamesRequest) ProtoMessage() {}

func (x *ActiveGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveGamesRequest.ProtoReflect.Descriptor instead.
func (*ActiveGamesRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{10}
}

// Response for [ActiveGames](paralympics.games.v1.GameManger.ActiveGames)
type ActiveGamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The currently active summer game
	Summer *Game `protobuf:"bytes,1,opt,name=summer,proto3" json:"summer,omitempty"`
	// The currently active winter game
	Winter *Game `protobuf:"bytes,2,opt,name=winter,proto3" json:"winter,omitempty"`
}

func (x *ActiveGamesResponse) Reset() {
	*x = ActiveGamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveGamesResponse) ProtoMessage() {}

func (x *ActiveGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveGamesResponse.ProtoReflect.Descriptor instead.
func (*ActiveGamesResponse) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{11}
}

func (x *ActiveGamesResponse) GetSummer() *Game {
	if x != nil {
		return x.Summer
	}
	return nil
}

func (x *ActiveGamesResponse) GetWinter() *Game {
	if x != nil {
		return x.Winter
	}
	return nil
}

// Request for [SetActiveGame](paralympics.games.v1.GameManger.SetActiveGame)
type SetActiveGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The game to acivate
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SetActiveGameRequest) Reset() {
	*x = SetActiveGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveGameRequest) ProtoMessage() {}

func (x *SetActiveGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveGameRequest.ProtoReflect.Descriptor instead.
func (*SetActiveGameRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{12}
}

func (x *SetActiveGameRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [SetActiveGame](paralympics.games.v1.GameManger.SetActiveGame)
type SetActiveGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetActiveGameResponse) Reset() {
	*x = SetActiveGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveGameResponse) ProtoMessage() {}

func (x *SetActiveGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveGameResponse.ProtoReflect.Descriptor instead.
func (*SetActiveGameResponse) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{13}
}

// Request for [PromoteGame](paralympics.games.v1.GameManger.PromoteGame)
type PromoteGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the game to promote
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PromoteGameRequest) Reset() {
	*x = PromoteGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteGameRequest) ProtoMessage() {}

func (x *PromoteGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteGameRequest.ProtoReflect.Descriptor instead.
func (*PromoteGameRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{14}
}

func (x *PromoteGameRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [PromoteGame](paralympics.games.v1.GameManger.PromoteGame)
type PromoteGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PromoteGameResponse) Reset() {
	*x = PromoteGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteGameResponse) ProtoMessage() {}

func (x *PromoteGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteGameResponse.ProtoReflect.Descriptor instead.
func (*PromoteGameResponse) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{15}
}

// Request for [PromotedGame](paralympics.games.v1.GameManger.PromotedGame)
type PromotedGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PromotedGameRequest) Reset() {
	*x = PromotedGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotedGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotedGameRequest) ProtoMessage() {}

func (x *PromotedGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotedGameRequest.ProtoReflect.Descriptor instead.
func (*PromotedGameRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{16}
}

// Response for [PromotedGame](paralympics.games.v1.GameManger.PromotedGame)
type PromotedGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game *Game `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
}

func (x *PromotedGameResponse) Reset() {
	*x = PromotedGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotedGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotedGameResponse) ProtoMessage() {}

func (x *PromotedGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotedGameResponse.ProtoReflect.Descriptor instead.
func (*PromotedGameResponse) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{17}
}

func (x *PromotedGameResponse) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

// Request for [PinSports](paralympics.games.v1.GameManger.PinSports)
type PinSportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Game to pin a sport too
	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// List of sports to pin to the game
	Sports []string `protobuf:"bytes,2,rep,name=sports,proto3" json:"sports,omitempty"`
}

func (x *PinSportsRequest) Reset() {
	*x = PinSportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinSportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinSportsRequest) ProtoMessage() {}

func (x *PinSportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinSportsRequest.ProtoReflect.Descriptor instead.
func (*PinSportsRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{18}
}

func (x *PinSportsRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *PinSportsRequest) GetSports() []string {
	if x != nil {
		return x.Sports
	}
	return nil
}

// Response for [PinSports](paralympics.games.v1.GameManger.PinSports)
type PinSportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PinSportsResponse) Reset() {
	*x = PinSportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinSportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinSportsResponse) ProtoMessage() {}

func (x *PinSportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinSportsResponse.ProtoReflect.Descriptor instead.
func (*PinSportsResponse) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{19}
}

// Request for [Restore](paralympics.games.v1.GameManager.Restore)
type RestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the game to restore
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RestoreRequest) Reset() {
	*x = RestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRequest) ProtoMessage() {}

func (x *RestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRequest.ProtoReflect.Descriptor instead.
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{20}
}

func (x *RestoreRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [Restore](paralympics.games.v1.GameManager.Restore)
type RestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The restored game
	Game *Game `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
}

func (x *RestoreResponse) Reset() {
	*x = RestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResponse) ProtoMessage() {}

func (x *RestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResponse.ProtoReflect.Descriptor instead.
func (*RestoreResponse) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{21}
}

func (x *RestoreResponse) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

// Request for [Purge](paralympics.games.v1.GameManager.Purge)
type PurgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the game to restore
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PurgeRequest) Reset() {
	*x = PurgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRequest) ProtoMessage() {}

func (x *PurgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRequest.ProtoReflect.Descriptor instead.
func (*PurgeRequest) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{22}
}

func (x *PurgeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [Purge](paralympics.games.v1.GameManager.Purge)
type PurgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PurgeResponse) Reset() {
	*x = PurgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_games_v1_game_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeResponse) ProtoMessage() {}

func (x *PurgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_games_v1_game_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeResponse.ProtoReflect.Descriptor instead.
func (*PurgeResponse) Descriptor() ([]byte, []int) {
	return file_games_v1_game_proto_rawDescGZIP(), []int{23}
}

var File_games_v1_game_proto protoreflect.FileDescriptor

var file_games_v1_game_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x04, 0x0a, 0x04, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x75,
	0x72, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x22,
	0x86, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22,
	0x36, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x74, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a,
	0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x38, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x7d, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x77,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x22,
	0x26, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x24, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x10,
	0x50, 0x69, 0x6e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x2a, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x21, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x43, 0x10, 0x01, 0x2a, 0xa6, 0x01, 0x0a, 0x05, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x04, 0x12,
	0x10, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67,
	0x6f, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62,
	0x10, 0x09, 0x2a, 0x3c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x55, 0x49, 0x44, 0x76, 0x34, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x52, 0x49, 0x10, 0x02,
	0x32, 0xcb, 0x08, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x4f, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x25, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12,
	0x27, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x1a, 0x1a, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x05, 0x50, 0x75, 0x72,
	0x67, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x09, 0x50, 0x69, 0x6e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x36,
	0x5a, 0x34, 0x67, 0x6f, 0x2e, 0x73, 0x6f, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f,
	0x62, 0x70, 0x61, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_games_v1_game_proto_rawDescOnce sync.Once
	file_games_v1_game_proto_rawDescData = file_games_v1_game_proto_rawDesc
)

func file_games_v1_game_proto_rawDescGZIP() []byte {
	file_games_v1_game_proto_rawDescOnce.Do(func() {
		file_games_v1_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_games_v1_game_proto_rawDescData)
	})
	return file_games_v1_game_proto_rawDescData
}

var file_games_v1_game_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_games_v1_game_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_games_v1_game_proto_goTypes = []interface{}{
	(Season)(0),                   // 0: paralympics.games.v1.Season
	(SortField)(0),                // 1: paralympics.games.v1.SortField
	(SortDirection)(0),            // 2: paralympics.games.v1.SortDirection
	(Field)(0),                    // 3: paralympics.games.v1.Field
	(ErrorCode)(0),                // 4: paralympics.games.v1.ErrorCode
	(*Game)(nil),                  // 5: paralympics.games.v1.Game
	(*SortOption)(nil),            // 6: paralympics.games.v1.SortOption
	(*Filter)(nil),                // 7: paralympics.games.v1.Filter
	(*GameByIDRequest)(nil),       // 8: paralympics.games.v1.GameByIDRequest
	(*GameBySlugRequest)(nil),     // 9: paralympics.games.v1.GameBySlugRequest
	(*Pagination)(nil),            // 10: paralympics.games.v1.Pagination
	(*ListGamesRequest)(nil),      // 11: paralympics.games.v1.ListGamesRequest
	(*ListGamesResponse)(nil),     // 12: paralympics.games.v1.ListGamesResponse
	(*FieldError)(nil),            // 13: paralympics.games.v1.FieldError
	(*ValidationError)(nil),       // 14: paralympics.games.v1.ValidationError
	(*ActiveGamesRequest)(nil),    // 15: paralympics.games.v1.ActiveGamesRequest
	(*ActiveGamesResponse)(nil),   // 16: paralympics.games.v1.ActiveGamesResponse
	(*SetActiveGameRequest)(nil),  // 17: paralympics.games.v1.SetActiveGameRequest
	(*SetActiveGameResponse)(nil), // 18: paralympics.games.v1.SetActiveGameResponse
	(*PromoteGameRequest)(nil),    // 19: paralympics.games.v1.PromoteGameRequest
	(*PromoteGameResponse)(nil),   // 20: paralympics.games.v1.PromoteGameResponse
	(*PromotedGameRequest)(nil),   // 21: paralympics.games.v1.PromotedGameRequest
	(*PromotedGameResponse)(nil),  // 22: paralympics.games.v1.PromotedGameResponse
	(*PinSportsRequest)(nil),      // 23: paralympics.games.v1.PinSportsRequest
	(*PinSportsResponse)(nil),     // 24: paralympics.games.v1.PinSportsResponse
	(*RestoreRequest)(nil),        // 25: paralympics.games.v1.RestoreRequest
	(*RestoreResponse)(nil),       // 26: paralympics.games.v1.RestoreResponse
	(*PurgeRequest)(nil),          // 27: paralympics.games.v1.PurgeRequest
	(*PurgeResponse)(nil),         // 28: paralympics.games.v1.PurgeResponse
	(*timestamp.Timestamp)(nil),   // 29: google.protobuf.Timestamp
	(*empty.Empty)(nil),           // 30: google.protobuf.Empty
}
var file_games_v1_game_proto_depIdxs = []int32{
	29, // 0: paralympics.games.v1.Game.create_date:type_name -> google.protobuf.Timestamp
	29, // 1: paralympics.games.v1.Game.update_date:type_name -> google.protobuf.Timestamp
	29, // 2: paralympics.games.v1.Game.delete_date:type_name -> google.protobuf.Timestamp
	0,  // 3: paralympics.games.v1.Game.season:type_name -> paralympics.games.v1.Season
	29, // 4: paralympics.games.v1.Game.start_date:type_name -> google.protobuf.Timestamp
	29, // 5: paralympics.games.v1.Game.end_date:type_name -> google.protobuf.Timestamp
	1,  // 6: paralympics.games.v1.SortOption.field:type_name -> paralympics.games.v1.SortField
	2,  // 7: paralympics.games.v1.SortOption.direction:type_name -> paralympics.games.v1.SortDirection
	0,  // 8: paralympics.games.v1.Filter.season:type_name -> paralympics.games.v1.Season
	10, // 9: paralympics.games.v1.ListGamesRequest.pagination:type_name -> paralympics.games.v1.Pagination
	6,  // 10: paralympics.games.v1.ListGamesRequest.sort:type_name -> paralympics.games.v1.SortOption
	7,  // 11: paralympics.games.v1.ListGamesRequest.filter:type_name -> paralympics.games.v1.Filter
	5,  // 12: paralympics.games.v1.ListGamesResponse.games:type_name -> paralympics.games.v1.Game
	3,  // 13: paralympics.games.v1.FieldError.field:type_name -> paralympics.games.v1.Field
	4,  // 14: paralympics.games.v1.FieldError.code:type_name -> paralympics.games.v1.ErrorCode
	13, // 15: paralympics.games.v1.ValidationError.errors:type_name -> paralympics.games.v1.FieldError
	5,  // 16: paralympics.games.v1.ActiveGamesResponse.summer:type_name -> paralympics.games.v1.Game
	5,  // 17: paralympics.games.v1.ActiveGamesResponse.winter:type_name -> paralympics.games.v1.Game
	5,  // 18: paralympics.games.v1.PromotedGameResponse.game:type_name -> paralympics.games.v1.Game
	5,  // 19: paralympics.games.v1.RestoreResponse.game:type_name -> paralympics.games.v1.Game
	8,  // 20: paralympics.games.v1.GameManager.GameByID:input_type -> paralympics.games.v1.GameByIDRequest
	9,  // 21: paralympics.games.v1.GameManager.GameBySlug:input_type -> paralympics.games.v1.GameBySlugRequest
	11, // 22: paralympics.games.v1.GameManager.ListGames:input_type -> paralympics.games.v1.ListGamesRequest
	5,  // 23: paralympics.games.v1.GameManager.PutGame:input_type -> paralympics.games.v1.Game
	5,  // 24: paralympics.games.v1.GameManager.DeleteGame:input_type -> paralympics.games.v1.Game
	25, // 25: paralympics.games.v1.GameManager.Restore:input_type -> paralympics.games.v1.RestoreRequest
	27, // 26: paralympics.games.v1.GameManager.Purge:input_type -> paralympics.games.v1.PurgeRequest
	15, // 27: paralympics.games.v1.GameManager.ActiveGames:input_type -> paralympics.games.v1.ActiveGamesRequest
	17, // 28: paralympics.games.v1.GameManager.SetActiveGame:input_type -> paralympics.games.v1.SetActiveGameRequest
	19, // 29: paralympics.games.v1.GameManager.PromoteGame:input_type -> paralympics.games.v1.PromoteGameRequest
	21, // 30: paralympics.games.v1.GameManager.PromotedGame:input_type -> paralympics.games.v1.PromotedGameRequest
	23, // 31: paralympics.games.v1.GameManager.PinSports:input_type -> paralympics.games.v1.PinSportsRequest
	5,  // 32: paralympics.games.v1.GameManager.GameByID:output_type -> paralympics.games.v1.Game
	5,  // 33: paralympics.games.v1.GameManager.GameBySlug:output_type -> paralympics.games.v1.Game
	12, // 34: paralympics.games.v1.GameManager.ListGames:output_type -> paralympics.games.v1.ListGamesResponse
	5,  // 35: paralympics.games.v1.GameManager.PutGame:output_type -> paralympics.games.v1.Game
	30, // 36: paralympics.games.v1.GameManager.DeleteGame:output_type -> google.protobuf.Empty
	26, // 37: paralympics.games.v1.GameManager.Restore:output_type -> paralympics.games.v1.RestoreResponse
	28, // 38: paralympics.games.v1.GameManager.Purge:output_type -> paralympics.games.v1.PurgeResponse
	16, // 39: paralympics.games.v1.GameManager.ActiveGames:output_type -> paralympics.games.v1.ActiveGamesResponse
	18, // 40: paralympics.games.v1.GameManager.SetActiveGame:output_type -> paralympics.games.v1.SetActiveGameResponse
	20, // 41: paralympics.games.v1.GameManager.PromoteGame:output_type -> paralympics.games.v1.PromoteGameResponse
	22, // 42: paralympics.games.v1.GameManager.PromotedGame:output_type -> paralympics.games.v1.PromotedGameResponse
	24, // 43: paralympics.games.v1.GameManager.PinSports:output_type -> paralympics.games.v1.PinSportsResponse
	32, // [32:44] is the sub-list for method output_type
	20, // [20:32] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_games_v1_game_proto_init() }
func file_games_v1_game_proto_init() {
	if File_games_v1_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_games_v1_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBySlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveGamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveGamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotedGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotedGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinSportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinSportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_games_v1_game_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_games_v1_game_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_games_v1_game_proto_goTypes,
		DependencyIndexes: file_games_v1_game_proto_depIdxs,
		EnumInfos:         file_games_v1_game_proto_enumTypes,
		MessageInfos:      file_games_v1_game_proto_msgTypes,
	}.Build()
	File_games_v1_game_proto = out.File
	file_games_v1_game_proto_rawDesc = nil
	file_games_v1_game_proto_goTypes = nil
	file_games_v1_game_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GameManagerClient is the client API for GameManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameManagerClient interface {
	// Gets a single Game
	GameByID(ctx context.Context, in *GameByIDRequest, opts ...grpc.CallOption) (*Game, error)
	GameBySlug(ctx context.Context, in *GameBySlugRequest, opts ...grpc.CallOption) (*Game, error)
	// Lists all the Games
	ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error)
	// Creates or Updates an Game
	PutGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	// Deletes an Game
	DeleteGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore an article that is soft deleted
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
	// Purge hard deletes a game and it's relations
	Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error)
	// ActiveGames returns the currently active games
	// These are depermined by the season and and their active flags
	ActiveGames(ctx context.Context, in *ActiveGamesRequest, opts ...grpc.CallOption) (*ActiveGamesResponse, error)
	// SetActiveGame will set the game to be the active game for it's season
	SetActiveGame(ctx context.Context, in *SetActiveGameRequest, opts ...grpc.CallOption) (*SetActiveGameResponse, error)
	// PromoteGame will promote an acive game to the "featured" game on the site
	PromoteGame(ctx context.Context, in *PromoteGameRequest, opts ...grpc.CallOption) (*PromoteGameResponse, error)
	// PromotedGame returns the currently promoted game
	PromotedGame(ctx context.Context, in *PromotedGameRequest, opts ...grpc.CallOption) (*PromotedGameResponse, error)
	// PinSports pins sports to a game
	PinSports(ctx context.Context, in *PinSportsRequest, opts ...grpc.CallOption) (*PinSportsResponse, error)
}

type gameManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameManagerClient(cc grpc.ClientConnInterface) GameManagerClient {
	return &gameManagerClient{cc}
}

func (c *gameManagerClient) GameByID(ctx context.Context, in *GameByIDRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/GameByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) GameBySlug(ctx context.Context, in *GameBySlugRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/GameBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/ListGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) PutGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/PutGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) DeleteGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/DeleteGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	out := new(RestoreResponse)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error) {
	out := new(PurgeResponse)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) ActiveGames(ctx context.Context, in *ActiveGamesRequest, opts ...grpc.CallOption) (*ActiveGamesResponse, error) {
	out := new(ActiveGamesResponse)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/ActiveGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) SetActiveGame(ctx context.Context, in *SetActiveGameRequest, opts ...grpc.CallOption) (*SetActiveGameResponse, error) {
	out := new(SetActiveGameResponse)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/SetActiveGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) PromoteGame(ctx context.Context, in *PromoteGameRequest, opts ...grpc.CallOption) (*PromoteGameResponse, error) {
	out := new(PromoteGameResponse)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/PromoteGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) PromotedGame(ctx context.Context, in *PromotedGameRequest, opts ...grpc.CallOption) (*PromotedGameResponse, error) {
	out := new(PromotedGameResponse)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/PromotedGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) PinSports(ctx context.Context, in *PinSportsRequest, opts ...grpc.CallOption) (*PinSportsResponse, error) {
	out := new(PinSportsResponse)
	err := c.cc.Invoke(ctx, "/paralympics.games.v1.GameManager/PinSports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameManagerServer is the server API for GameManager service.
type GameManagerServer interface {
	// Gets a single Game
	GameByID(context.Context, *GameByIDRequest) (*Game, error)
	GameBySlug(context.Context, *GameBySlugRequest) (*Game, error)
	// Lists all the Games
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	// Creates or Updates an Game
	PutGame(context.Context, *Game) (*Game, error)
	// Deletes an Game
	DeleteGame(context.Context, *Game) (*empty.Empty, error)
	// Restore an article that is soft deleted
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	// Purge hard deletes a game and it's relations
	Purge(context.Context, *PurgeRequest) (*PurgeResponse, error)
	// ActiveGames returns the currently active games
	// These are depermined by the season and and their active flags
	ActiveGames(context.Context, *ActiveGamesRequest) (*ActiveGamesResponse, error)
	// SetActiveGame will set the game to be the active game for it's season
	SetActiveGame(context.Context, *SetActiveGameRequest) (*SetActiveGameResponse, error)
	// PromoteGame will promote an acive game to the "featured" game on the site
	PromoteGame(context.Context, *PromoteGameRequest) (*PromoteGameResponse, error)
	// PromotedGame returns the currently promoted game
	PromotedGame(context.Context, *PromotedGameRequest) (*PromotedGameResponse, error)
	// PinSports pins sports to a game
	PinSports(context.Context, *PinSportsRequest) (*PinSportsResponse, error)
}

// UnimplementedGameManagerServer can be embedded to have forward compatible implementations.
type UnimplementedGameManagerServer struct {
}

func (*UnimplementedGameManagerServer) GameByID(context.Context, *GameByIDRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameByID not implemented")
}
func (*UnimplementedGameManagerServer) GameBySlug(context.Context, *GameBySlugRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameBySlug not implemented")
}
func (*UnimplementedGameManagerServer) ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (*UnimplementedGameManagerServer) PutGame(context.Context, *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGame not implemented")
}
func (*UnimplementedGameManagerServer) DeleteGame(context.Context, *Game) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGame not implemented")
}
func (*UnimplementedGameManagerServer) Restore(context.Context, *RestoreRequest) (*RestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedGameManagerServer) Purge(context.Context, *PurgeRequest) (*PurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (*UnimplementedGameManagerServer) ActiveGames(context.Context, *ActiveGamesRequest) (*ActiveGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveGames not implemented")
}
func (*UnimplementedGameManagerServer) SetActiveGame(context.Context, *SetActiveGameRequest) (*SetActiveGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveGame not implemented")
}
func (*UnimplementedGameManagerServer) PromoteGame(context.Context, *PromoteGameRequest) (*PromoteGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteGame not implemented")
}
func (*UnimplementedGameManagerServer) PromotedGame(context.Context, *PromotedGameRequest) (*PromotedGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotedGame not implemented")
}
func (*UnimplementedGameManagerServer) PinSports(context.Context, *PinSportsRequest) (*PinSportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinSports not implemented")
}

func RegisterGameManagerServer(s *grpc.Server, srv GameManagerServer) {
	s.RegisterService(&_GameManager_serviceDesc, srv)
}

func _GameManager_GameByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).GameByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/GameByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).GameByID(ctx, req.(*GameByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_GameBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).GameBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/GameBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).GameBySlug(ctx, req.(*GameBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/ListGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).ListGames(ctx, req.(*ListGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_PutGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).PutGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/PutGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).PutGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_DeleteGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).DeleteGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/DeleteGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).DeleteGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).Purge(ctx, req.(*PurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_ActiveGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).ActiveGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/ActiveGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).ActiveGames(ctx, req.(*ActiveGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_SetActiveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).SetActiveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/SetActiveGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).SetActiveGame(ctx, req.(*SetActiveGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_PromoteGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).PromoteGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/PromoteGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).PromoteGame(ctx, req.(*PromoteGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_PromotedGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotedGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).PromotedGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/PromotedGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).PromotedGame(ctx, req.(*PromotedGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_PinSports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinSportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).PinSports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.games.v1.GameManager/PinSports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).PinSports(ctx, req.(*PinSportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paralympics.games.v1.GameManager",
	HandlerType: (*GameManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GameByID",
			Handler:    _GameManager_GameByID_Handler,
		},
		{
			MethodName: "GameBySlug",
			Handler:    _GameManager_GameBySlug_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _GameManager_ListGames_Handler,
		},
		{
			MethodName: "PutGame",
			Handler:    _GameManager_PutGame_Handler,
		},
		{
			MethodName: "DeleteGame",
			Handler:    _GameManager_DeleteGame_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _GameManager_Restore_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _GameManager_Purge_Handler,
		},
		{
			MethodName: "ActiveGames",
			Handler:    _GameManager_ActiveGames_Handler,
		},
		{
			MethodName: "SetActiveGame",
			Handler:    _GameManager_SetActiveGame_Handler,
		},
		{
			MethodName: "PromoteGame",
			Handler:    _GameManager_PromoteGame_Handler,
		},
		{
			MethodName: "PromotedGame",
			Handler:    _GameManager_PromotedGame_Handler,
		},
		{
			MethodName: "PinSports",
			Handler:    _GameManager_PinSports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "games/v1/game.proto",
}
