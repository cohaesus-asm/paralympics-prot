// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: athletes/v1/athlete.proto

package athletes

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v1 "go.soon.build/bpa/website/protogen-go/content/social/v1"
	v11 "go.soon.build/bpa/website/protogen-go/content/v1"
	v13 "go.soon.build/bpa/website/protogen-go/games/v1"
	v12 "go.soon.build/bpa/website/protogen-go/sports/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Field mapping used in validation errors
type Field int32

const (
	Field_AthleteId         Field = 0
	Field_AthleteSlug       Field = 1
	Field_AthleteName       Field = 2
	Field_AthleteRegion     Field = 3
	Field_AthleteDob        Field = 4
	Field_AthleteClass      Field = 5
	Field_AthleteImgProfile Field = 6
	Field_AthleteHero       Field = 7
	Field_AthleteHeroAlt    Field = 8
)

// Enum value maps for Field.
var (
	Field_name = map[int32]string{
		0: "AthleteId",
		1: "AthleteSlug",
		2: "AthleteName",
		3: "AthleteRegion",
		4: "AthleteDob",
		5: "AthleteClass",
		6: "AthleteImgProfile",
		7: "AthleteHero",
		8: "AthleteHeroAlt",
	}
	Field_value = map[string]int32{
		"AthleteId":         0,
		"AthleteSlug":       1,
		"AthleteName":       2,
		"AthleteRegion":     3,
		"AthleteDob":        4,
		"AthleteClass":      5,
		"AthleteImgProfile": 6,
		"AthleteHero":       7,
		"AthleteHeroAlt":    8,
	}
)

func (x Field) Enum() *Field {
	p := new(Field)
	*p = x
	return p
}

func (x Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field) Descriptor() protoreflect.EnumDescriptor {
	return file_athletes_v1_athlete_proto_enumTypes[0].Descriptor()
}

func (Field) Type() protoreflect.EnumType {
	return &file_athletes_v1_athlete_proto_enumTypes[0]
}

func (x Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field.Descriptor instead.
func (Field) EnumDescriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{0}
}

// Error Codes returned as part of validation errors
type ErrorCode int32

const (
	// Generic error codes
	ErrorCode_Required ErrorCode = 0
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "Required",
	}
	ErrorCode_value = map[string]int32{
		"Required": 0,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_athletes_v1_athlete_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_athletes_v1_athlete_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{1}
}

// Fields we can sort Athletes by
type SortField int32

const (
	SortField_CREATE_DATE SortField = 0
	SortField_UPDATE_DATE SortField = 1
	SortField_DELETE_DATE SortField = 2
	SortField_NAME        SortField = 3
)

// Enum value maps for SortField.
var (
	SortField_name = map[int32]string{
		0: "CREATE_DATE",
		1: "UPDATE_DATE",
		2: "DELETE_DATE",
		3: "NAME",
	}
	SortField_value = map[string]int32{
		"CREATE_DATE": 0,
		"UPDATE_DATE": 1,
		"DELETE_DATE": 2,
		"NAME":        3,
	}
)

func (x SortField) Enum() *SortField {
	p := new(SortField)
	*p = x
	return p
}

func (x SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_athletes_v1_athlete_proto_enumTypes[2].Descriptor()
}

func (SortField) Type() protoreflect.EnumType {
	return &file_athletes_v1_athlete_proto_enumTypes[2]
}

func (x SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortField.Descriptor instead.
func (SortField) EnumDescriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{2}
}

// FeaturedFilter types are used to eplicitly set whether we want
// all athletes regardless of their feature state, only featured,\
// or not featured athletes
// The default value of this filter being ALL
type FeaturedFilter int32

const (
	FeaturedFilter_ALL          FeaturedFilter = 0
	FeaturedFilter_FEATURED     FeaturedFilter = 1
	FeaturedFilter_NOT_FEATURED FeaturedFilter = 2
)

// Enum value maps for FeaturedFilter.
var (
	FeaturedFilter_name = map[int32]string{
		0: "ALL",
		1: "FEATURED",
		2: "NOT_FEATURED",
	}
	FeaturedFilter_value = map[string]int32{
		"ALL":          0,
		"FEATURED":     1,
		"NOT_FEATURED": 2,
	}
)

func (x FeaturedFilter) Enum() *FeaturedFilter {
	p := new(FeaturedFilter)
	*p = x
	return p
}

func (x FeaturedFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeaturedFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_athletes_v1_athlete_proto_enumTypes[3].Descriptor()
}

func (FeaturedFilter) Type() protoreflect.EnumType {
	return &file_athletes_v1_athlete_proto_enumTypes[3]
}

func (x FeaturedFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeaturedFilter.Descriptor instead.
func (FeaturedFilter) EnumDescriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{3}
}

// The type of sort to apply, ascending or descending
type SortDirection int32

const (
	SortDirection_ASC SortDirection = 0
	SortDirection_DSC SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "ASC",
		1: "DSC",
	}
	SortDirection_value = map[string]int32{
		"ASC": 0,
		"DSC": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_athletes_v1_athlete_proto_enumTypes[4].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_athletes_v1_athlete_proto_enumTypes[4]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{4}
}

// Field Validation Error
type FieldError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field the error occured on
	Field Field `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.athletes.v1.Field" json:"field,omitempty"`
	// Error that occured
	Code ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=paralympics.athletes.v1.ErrorCode" json:"code,omitempty"`
}

func (x *FieldError) Reset() {
	*x = FieldError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldError) ProtoMessage() {}

func (x *FieldError) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldError.ProtoReflect.Descriptor instead.
func (*FieldError) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{0}
}

func (x *FieldError) GetField() Field {
	if x != nil {
		return x.Field
	}
	return Field_AthleteId
}

func (x *FieldError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_Required
}

// Validation error response messages
type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Validation errors that occured
	Errors []*FieldError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{1}
}

func (x *ValidationError) GetErrors() []*FieldError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// An Athlete stored in the content service
type Athlete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug           string               `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	CreateDate     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	UpdateDate     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	DeleteDate     *timestamp.Timestamp `protobuf:"bytes,5,opt,name=delete_date,json=deleteDate,proto3" json:"delete_date,omitempty"`
	Name           string               `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Region         string               `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	Dob            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=dob,proto3" json:"dob,omitempty"`
	Class          string               `protobuf:"bytes,9,opt,name=class,proto3" json:"class,omitempty"`
	SocialProfiles []*v1.SocialProfile  `protobuf:"bytes,10,rep,name=social_profiles,json=socialProfiles,proto3" json:"social_profiles,omitempty"`
	ImgProfile     *v11.Image           `protobuf:"bytes,11,opt,name=img_profile,json=imgProfile,proto3" json:"img_profile,omitempty"`
	ImgHero        *v11.Image           `protobuf:"bytes,12,opt,name=img_hero,json=imgHero,proto3" json:"img_hero,omitempty"`
	ImgHeroAlt     string               `protobuf:"bytes,13,opt,name=img_hero_alt,json=imgHeroAlt,proto3" json:"img_hero_alt,omitempty"`
	Featured       bool                 `protobuf:"varint,14,opt,name=featured,proto3" json:"featured,omitempty"`
}

func (x *Athlete) Reset() {
	*x = Athlete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Athlete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Athlete) ProtoMessage() {}

func (x *Athlete) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Athlete.ProtoReflect.Descriptor instead.
func (*Athlete) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{2}
}

func (x *Athlete) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Athlete) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Athlete) GetCreateDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *Athlete) GetUpdateDate() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *Athlete) GetDeleteDate() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteDate
	}
	return nil
}

func (x *Athlete) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Athlete) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Athlete) GetDob() *timestamp.Timestamp {
	if x != nil {
		return x.Dob
	}
	return nil
}

func (x *Athlete) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Athlete) GetSocialProfiles() []*v1.SocialProfile {
	if x != nil {
		return x.SocialProfiles
	}
	return nil
}

func (x *Athlete) GetImgProfile() *v11.Image {
	if x != nil {
		return x.ImgProfile
	}
	return nil
}

func (x *Athlete) GetImgHero() *v11.Image {
	if x != nil {
		return x.ImgHero
	}
	return nil
}

func (x *Athlete) GetImgHeroAlt() string {
	if x != nil {
		return x.ImgHeroAlt
	}
	return ""
}

func (x *Athlete) GetFeatured() bool {
	if x != nil {
		return x.Featured
	}
	return false
}

// Sort field + sort direction
type SortOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     SortField     `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.athletes.v1.SortField" json:"field,omitempty"`
	Direction SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=paralympics.athletes.v1.SortDirection" json:"direction,omitempty"`
}

func (x *SortOption) Reset() {
	*x = SortOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOption) ProtoMessage() {}

func (x *SortOption) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOption.ProtoReflect.Descriptor instead.
func (*SortOption) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{3}
}

func (x *SortOption) GetField() SortField {
	if x != nil {
		return x.Field
	}
	return SortField_CREATE_DATE
}

func (x *SortOption) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_ASC
}

// GameFilter allows us to filter athletes by games,
// either by active state or id, or both
type GameFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the game to filter by
	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// Filter by active game - default false
	Active bool `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *GameFilter) Reset() {
	*x = GameFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameFilter) ProtoMessage() {}

func (x *GameFilter) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameFilter.ProtoReflect.Descriptor instead.
func (*GameFilter) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{4}
}

func (x *GameFilter) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameFilter) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

// Fields we can filter Athletes by
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter athletes by sport
	SportId string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	// Filter athletes by game
	Game *GameFilter `protobuf:"bytes,2,opt,name=game,proto3" json:"game,omitempty"`
	// Athlete name - this isn't the same as the fuzzy search
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Show only ahtletes that are deleted
	Deleted bool `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Athlete feature state
	Featured FeaturedFilter `protobuf:"varint,5,opt,name=featured,proto3,enum=paralympics.athletes.v1.FeaturedFilter" json:"featured,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{5}
}

func (x *Filter) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *Filter) GetGame() *GameFilter {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filter) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Filter) GetFeatured() FeaturedFilter {
	if x != nil {
		return x.Featured
	}
	return FeaturedFilter_ALL
}

// Pagination
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{6}
}

func (x *Pagination) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Get paginaged list of Athletes
type ListAthletesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination   `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"` // Paginated response
	Sort       []*SortOption `protobuf:"bytes,2,rep,name=sort,proto3" json:"sort,omitempty"`             // Sort response
	Filter     *Filter       `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`         // Filter Athletes
}

func (x *ListAthletesRequest) Reset() {
	*x = ListAthletesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAthletesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAthletesRequest) ProtoMessage() {}

func (x *ListAthletesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAthletesRequest.ProtoReflect.Descriptor instead.
func (*ListAthletesRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{7}
}

func (x *ListAthletesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListAthletesRequest) GetSort() []*SortOption {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListAthletesRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Request for the `AthleteByID` method
type AthleteByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AthleteByIDRequest) Reset() {
	*x = AthleteByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AthleteByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthleteByIDRequest) ProtoMessage() {}

func (x *AthleteByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthleteByIDRequest.ProtoReflect.Descriptor instead.
func (*AthleteByIDRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{8}
}

func (x *AthleteByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request for the `AthleteBySlug` method
type AthleteBySlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *AthleteBySlugRequest) Reset() {
	*x = AthleteBySlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AthleteBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthleteBySlugRequest) ProtoMessage() {}

func (x *AthleteBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthleteBySlugRequest.ProtoReflect.Descriptor instead.
func (*AthleteBySlugRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{9}
}

func (x *AthleteBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

// Request for getting content by Athlete ID which is a UUID v4
type AthleteContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AthleteId   string `protobuf:"bytes,1,opt,name=athlete_id,json=athleteId,proto3" json:"athlete_id,omitempty"`
	AthleteSlug string `protobuf:"bytes,2,opt,name=athlete_slug,json=athleteSlug,proto3" json:"athlete_slug,omitempty"`
}

func (x *AthleteContentRequest) Reset() {
	*x = AthleteContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AthleteContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthleteContentRequest) ProtoMessage() {}

func (x *AthleteContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthleteContentRequest.ProtoReflect.Descriptor instead.
func (*AthleteContentRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{10}
}

func (x *AthleteContentRequest) GetAthleteId() string {
	if x != nil {
		return x.AthleteId
	}
	return ""
}

func (x *AthleteContentRequest) GetAthleteSlug() string {
	if x != nil {
		return x.AthleteSlug
	}
	return ""
}

// Response for ListAthletes
type ListAthletesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Athletes []*Athlete `protobuf:"bytes,1,rep,name=athletes,proto3" json:"athletes,omitempty"`
	Total    int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // Total number of athletes that match the search
}

func (x *ListAthletesResponse) Reset() {
	*x = ListAthletesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAthletesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAthletesResponse) ProtoMessage() {}

func (x *ListAthletesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAthletesResponse.ProtoReflect.Descriptor instead.
func (*ListAthletesResponse) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{11}
}

func (x *ListAthletesResponse) GetAthletes() []*Athlete {
	if x != nil {
		return x.Athletes
	}
	return nil
}

func (x *ListAthletesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Request for [PinSports](paralympics.games.v1.AthleteManager.PinSports)
type PinSportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the athlete to pin sports too
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of sports to pin to the game
	Sports []string `protobuf:"bytes,2,rep,name=sports,proto3" json:"sports,omitempty"`
}

func (x *PinSportsRequest) Reset() {
	*x = PinSportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinSportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinSportsRequest) ProtoMessage() {}

func (x *PinSportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinSportsRequest.ProtoReflect.Descriptor instead.
func (*PinSportsRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{12}
}

func (x *PinSportsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PinSportsRequest) GetSports() []string {
	if x != nil {
		return x.Sports
	}
	return nil
}

// Response for [PinSports](paralympics.games.v1.AthleteManager.PinSports)
type PinSportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PinSportsResponse) Reset() {
	*x = PinSportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinSportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinSportsResponse) ProtoMessage() {}

func (x *PinSportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinSportsResponse.ProtoReflect.Descriptor instead.
func (*PinSportsResponse) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{13}
}

// Request for [PinnedSports](paralympics.games.v1.AthleteManager.PinSports)
type PinnedSportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the athlete to return pinned sports for
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PinnedSportsRequest) Reset() {
	*x = PinnedSportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedSportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedSportsRequest) ProtoMessage() {}

func (x *PinnedSportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedSportsRequest.ProtoReflect.Descriptor instead.
func (*PinnedSportsRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{14}
}

func (x *PinnedSportsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [PinnedSports](paralympics.games.v1.AthleteManager.PinSports)
type PinnedSportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sports pinned to an athlete
	Sports []*v12.Sport `protobuf:"bytes,1,rep,name=sports,proto3" json:"sports,omitempty"`
}

func (x *PinnedSportsResponse) Reset() {
	*x = PinnedSportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedSportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedSportsResponse) ProtoMessage() {}

func (x *PinnedSportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedSportsResponse.ProtoReflect.Descriptor instead.
func (*PinnedSportsResponse) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{15}
}

func (x *PinnedSportsResponse) GetSports() []*v12.Sport {
	if x != nil {
		return x.Sports
	}
	return nil
}

// Request for [PinGames](paralympics.games.v1.AthleteManager.PinGames)
type PinGamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the athlete to pin sports too
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of sports to pin to the game
	Games []string `protobuf:"bytes,2,rep,name=games,proto3" json:"games,omitempty"`
}

func (x *PinGamesRequest) Reset() {
	*x = PinGamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinGamesRequest) ProtoMessage() {}

func (x *PinGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinGamesRequest.ProtoReflect.Descriptor instead.
func (*PinGamesRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{16}
}

func (x *PinGamesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PinGamesRequest) GetGames() []string {
	if x != nil {
		return x.Games
	}
	return nil
}

// Response for [PinGames](paralympics.games.v1.AthleteManager.PinGames)
type PinGamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PinGamesResponse) Reset() {
	*x = PinGamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinGamesResponse) ProtoMessage() {}

func (x *PinGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinGamesResponse.ProtoReflect.Descriptor instead.
func (*PinGamesResponse) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{17}
}

// Request for [PinnedGames](paralympics.games.v1.AthleteManager.PinGames)
type PinnedGamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the athlete to return pinned games for
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PinnedGamesRequest) Reset() {
	*x = PinnedGamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedGamesRequest) ProtoMessage() {}

func (x *PinnedGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedGamesRequest.ProtoReflect.Descriptor instead.
func (*PinnedGamesRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{18}
}

func (x *PinnedGamesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [PinnedGames](paralympics.games.v1.AthleteManager.PinGames)
type PinnedGamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Games pinned to an athlete
	Games []*v13.Game `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
}

func (x *PinnedGamesResponse) Reset() {
	*x = PinnedGamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedGamesResponse) ProtoMessage() {}

func (x *PinnedGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedGamesResponse.ProtoReflect.Descriptor instead.
func (*PinnedGamesResponse) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{19}
}

func (x *PinnedGamesResponse) GetGames() []*v13.Game {
	if x != nil {
		return x.Games
	}
	return nil
}

// Request for [Search](paralympics.games.v1.AthleteManager.Search)
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search query
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// number of results to return
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{20}
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// SearchResult for [Search](paralympics.games.v1.AthleteManager.Search)
type SearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Athlete found
	Athlete *Athlete `protobuf:"bytes,1,opt,name=athlete,proto3" json:"athlete,omitempty"`
	// Weighting - this may or may not be useful to know
	Weighting float32 `protobuf:"fixed32,2,opt,name=weighting,proto3" json:"weighting,omitempty"`
}

func (x *SearchResult) Reset() {
	*x = SearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResult) ProtoMessage() {}

func (x *SearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResult.ProtoReflect.Descriptor instead.
func (*SearchResult) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{21}
}

func (x *SearchResult) GetAthlete() *Athlete {
	if x != nil {
		return x.Athlete
	}
	return nil
}

func (x *SearchResult) GetWeighting() float32 {
	if x != nil {
		return x.Weighting
	}
	return 0
}

// ToggleFeaturedRequest for [ToggleFeatured](paralympics.games.v1.AthleteManager.ToggleFeatured)
type ToggleFeaturedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the athlete to feature
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ToggleFeaturedRequest) Reset() {
	*x = ToggleFeaturedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleFeaturedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleFeaturedRequest) ProtoMessage() {}

func (x *ToggleFeaturedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleFeaturedRequest.ProtoReflect.Descriptor instead.
func (*ToggleFeaturedRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{22}
}

func (x *ToggleFeaturedRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ToggleFeaturedResponse for [ToggleFeatured](paralympics.games.v1.AthleteManager.ToggleFeatured)
type ToggleFeaturedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The featured state of the athelete
	Featured bool `protobuf:"varint,1,opt,name=featured,proto3" json:"featured,omitempty"`
}

func (x *ToggleFeaturedResponse) Reset() {
	*x = ToggleFeaturedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleFeaturedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleFeaturedResponse) ProtoMessage() {}

func (x *ToggleFeaturedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleFeaturedResponse.ProtoReflect.Descriptor instead.
func (*ToggleFeaturedResponse) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{23}
}

func (x *ToggleFeaturedResponse) GetFeatured() bool {
	if x != nil {
		return x.Featured
	}
	return false
}

// FeaturedRequest for [Featured](paralympics.games.v1.AthleteManager.Featured)
type FeaturedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FeaturedRequest) Reset() {
	*x = FeaturedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturedRequest) ProtoMessage() {}

func (x *FeaturedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturedRequest.ProtoReflect.Descriptor instead.
func (*FeaturedRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{24}
}

// FeaturedResponse for [Featured](paralympics.games.v1.AthleteManager.Featured)
type FeaturedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Featured athletes
	Athletes []*Athlete `protobuf:"bytes,1,rep,name=athletes,proto3" json:"athletes,omitempty"`
}

func (x *FeaturedResponse) Reset() {
	*x = FeaturedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturedResponse) ProtoMessage() {}

func (x *FeaturedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturedResponse.ProtoReflect.Descriptor instead.
func (*FeaturedResponse) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{25}
}

func (x *FeaturedResponse) GetAthletes() []*Athlete {
	if x != nil {
		return x.Athletes
	}
	return nil
}

// Request for [Restore](paralympics.athletes.v1.AthleteManager.Restore)
type RestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the athlete to restore
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RestoreRequest) Reset() {
	*x = RestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRequest) ProtoMessage() {}

func (x *RestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRequest.ProtoReflect.Descriptor instead.
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{26}
}

func (x *RestoreRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [Restore](paralympics.athletes.v1.AthleteManager.Restore)
type RestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The restored athlete
	Athlete *Athlete `protobuf:"bytes,1,opt,name=athlete,proto3" json:"athlete,omitempty"`
}

func (x *RestoreResponse) Reset() {
	*x = RestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResponse) ProtoMessage() {}

func (x *RestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResponse.ProtoReflect.Descriptor instead.
func (*RestoreResponse) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{27}
}

func (x *RestoreResponse) GetAthlete() *Athlete {
	if x != nil {
		return x.Athlete
	}
	return nil
}

// Request for [Purge](paralympics.athletes.v1.AthleteManager.Purge)
type PurgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the athlete to restore
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PurgeRequest) Reset() {
	*x = PurgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRequest) ProtoMessage() {}

func (x *PurgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRequest.ProtoReflect.Descriptor instead.
func (*PurgeRequest) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{28}
}

func (x *PurgeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [Purge](paralympics.athletes.v1.AthleteManager.Purge)
type PurgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PurgeResponse) Reset() {
	*x = PurgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_athletes_v1_athlete_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeResponse) ProtoMessage() {}

func (x *PurgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_athletes_v1_athlete_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeResponse.ProtoReflect.Descriptor instead.
func (*PurgeResponse) Descriptor() ([]byte, []int) {
	return file_athletes_v1_athlete_proto_rawDescGZIP(), []int{29}
}

var File_athletes_v1_athlete_proto protoreflect.FileDescriptor

var file_athletes_v1_athlete_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x7a, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x34, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a,
	0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xdc, 0x04,
	0x0a, 0x07, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x03, 0x64, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x64, 0x6f, 0x62, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6d, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x68, 0x65, 0x72, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x6d, 0x67, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x22, 0x8c, 0x01, 0x0a,
	0x0a, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x12, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x14, 0x41, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x59, 0x0a, 0x15, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6c, 0x75, 0x67,
	0x22, 0x6a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x74, 0x68, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x08, 0x61, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3a, 0x0a, 0x10,
	0x50, 0x69, 0x6e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x53,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a,
	0x13, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x22, 0x37, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x50,
	0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x0a, 0x12, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x3b,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x68, 0x0a, 0x0c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x61,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x07,
	0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x27, 0x0a, 0x15, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34,
	0x0a, 0x16, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x08, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x07, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xa9, 0x01, 0x0a, 0x05,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6c, 0x75, 0x67, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x62, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x72,
	0x6f, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65,
	0x72, 0x6f, 0x41, 0x6c, 0x74, 0x10, 0x08, 0x2a, 0x19, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x10, 0x00, 0x2a, 0x48, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x0e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x21, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x43, 0x10, 0x01, 0x32, 0xcd, 0x0c, 0x0a, 0x0e, 0x41,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5e, 0x0a,
	0x0b, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x0d, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2d,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x1a, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x05, 0x50, 0x75, 0x72, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x41,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x41,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x64, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0b, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x73, 0x0a, 0x0e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x6f,
	0x2e, 0x73, 0x6f, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x62, 0x70, 0x61, 0x2f,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_athletes_v1_athlete_proto_rawDescOnce sync.Once
	file_athletes_v1_athlete_proto_rawDescData = file_athletes_v1_athlete_proto_rawDesc
)

func file_athletes_v1_athlete_proto_rawDescGZIP() []byte {
	file_athletes_v1_athlete_proto_rawDescOnce.Do(func() {
		file_athletes_v1_athlete_proto_rawDescData = protoimpl.X.CompressGZIP(file_athletes_v1_athlete_proto_rawDescData)
	})
	return file_athletes_v1_athlete_proto_rawDescData
}

var file_athletes_v1_athlete_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_athletes_v1_athlete_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_athletes_v1_athlete_proto_goTypes = []interface{}{
	(Field)(0),                     // 0: paralympics.athletes.v1.Field
	(ErrorCode)(0),                 // 1: paralympics.athletes.v1.ErrorCode
	(SortField)(0),                 // 2: paralympics.athletes.v1.SortField
	(FeaturedFilter)(0),            // 3: paralympics.athletes.v1.FeaturedFilter
	(SortDirection)(0),             // 4: paralympics.athletes.v1.SortDirection
	(*FieldError)(nil),             // 5: paralympics.athletes.v1.FieldError
	(*ValidationError)(nil),        // 6: paralympics.athletes.v1.ValidationError
	(*Athlete)(nil),                // 7: paralympics.athletes.v1.Athlete
	(*SortOption)(nil),             // 8: paralympics.athletes.v1.SortOption
	(*GameFilter)(nil),             // 9: paralympics.athletes.v1.GameFilter
	(*Filter)(nil),                 // 10: paralympics.athletes.v1.Filter
	(*Pagination)(nil),             // 11: paralympics.athletes.v1.Pagination
	(*ListAthletesRequest)(nil),    // 12: paralympics.athletes.v1.ListAthletesRequest
	(*AthleteByIDRequest)(nil),     // 13: paralympics.athletes.v1.AthleteByIDRequest
	(*AthleteBySlugRequest)(nil),   // 14: paralympics.athletes.v1.AthleteBySlugRequest
	(*AthleteContentRequest)(nil),  // 15: paralympics.athletes.v1.AthleteContentRequest
	(*ListAthletesResponse)(nil),   // 16: paralympics.athletes.v1.ListAthletesResponse
	(*PinSportsRequest)(nil),       // 17: paralympics.athletes.v1.PinSportsRequest
	(*PinSportsResponse)(nil),      // 18: paralympics.athletes.v1.PinSportsResponse
	(*PinnedSportsRequest)(nil),    // 19: paralympics.athletes.v1.PinnedSportsRequest
	(*PinnedSportsResponse)(nil),   // 20: paralympics.athletes.v1.PinnedSportsResponse
	(*PinGamesRequest)(nil),        // 21: paralympics.athletes.v1.PinGamesRequest
	(*PinGamesResponse)(nil),       // 22: paralympics.athletes.v1.PinGamesResponse
	(*PinnedGamesRequest)(nil),     // 23: paralympics.athletes.v1.PinnedGamesRequest
	(*PinnedGamesResponse)(nil),    // 24: paralympics.athletes.v1.PinnedGamesResponse
	(*SearchRequest)(nil),          // 25: paralympics.athletes.v1.SearchRequest
	(*SearchResult)(nil),           // 26: paralympics.athletes.v1.SearchResult
	(*ToggleFeaturedRequest)(nil),  // 27: paralympics.athletes.v1.ToggleFeaturedRequest
	(*ToggleFeaturedResponse)(nil), // 28: paralympics.athletes.v1.ToggleFeaturedResponse
	(*FeaturedRequest)(nil),        // 29: paralympics.athletes.v1.FeaturedRequest
	(*FeaturedResponse)(nil),       // 30: paralympics.athletes.v1.FeaturedResponse
	(*RestoreRequest)(nil),         // 31: paralympics.athletes.v1.RestoreRequest
	(*RestoreResponse)(nil),        // 32: paralympics.athletes.v1.RestoreResponse
	(*PurgeRequest)(nil),           // 33: paralympics.athletes.v1.PurgeRequest
	(*PurgeResponse)(nil),          // 34: paralympics.athletes.v1.PurgeResponse
	(*timestamp.Timestamp)(nil),    // 35: google.protobuf.Timestamp
	(*v1.SocialProfile)(nil),       // 36: paralympics.content.v1.SocialProfile
	(*v11.Image)(nil),              // 37: paralympics.content.v1.Image
	(*v12.Sport)(nil),              // 38: paralympics.sports.v1.Sport
	(*v13.Game)(nil),               // 39: paralympics.games.v1.Game
	(*v11.ContentModule)(nil),      // 40: paralympics.content.v1.ContentModule
	(*empty.Empty)(nil),            // 41: google.protobuf.Empty
}
var file_athletes_v1_athlete_proto_depIdxs = []int32{
	0,  // 0: paralympics.athletes.v1.FieldError.field:type_name -> paralympics.athletes.v1.Field
	1,  // 1: paralympics.athletes.v1.FieldError.code:type_name -> paralympics.athletes.v1.ErrorCode
	5,  // 2: paralympics.athletes.v1.ValidationError.errors:type_name -> paralympics.athletes.v1.FieldError
	35, // 3: paralympics.athletes.v1.Athlete.create_date:type_name -> google.protobuf.Timestamp
	35, // 4: paralympics.athletes.v1.Athlete.update_date:type_name -> google.protobuf.Timestamp
	35, // 5: paralympics.athletes.v1.Athlete.delete_date:type_name -> google.protobuf.Timestamp
	35, // 6: paralympics.athletes.v1.Athlete.dob:type_name -> google.protobuf.Timestamp
	36, // 7: paralympics.athletes.v1.Athlete.social_profiles:type_name -> paralympics.content.v1.SocialProfile
	37, // 8: paralympics.athletes.v1.Athlete.img_profile:type_name -> paralympics.content.v1.Image
	37, // 9: paralympics.athletes.v1.Athlete.img_hero:type_name -> paralympics.content.v1.Image
	2,  // 10: paralympics.athletes.v1.SortOption.field:type_name -> paralympics.athletes.v1.SortField
	4,  // 11: paralympics.athletes.v1.SortOption.direction:type_name -> paralympics.athletes.v1.SortDirection
	9,  // 12: paralympics.athletes.v1.Filter.game:type_name -> paralympics.athletes.v1.GameFilter
	3,  // 13: paralympics.athletes.v1.Filter.featured:type_name -> paralympics.athletes.v1.FeaturedFilter
	11, // 14: paralympics.athletes.v1.ListAthletesRequest.pagination:type_name -> paralympics.athletes.v1.Pagination
	8,  // 15: paralympics.athletes.v1.ListAthletesRequest.sort:type_name -> paralympics.athletes.v1.SortOption
	10, // 16: paralympics.athletes.v1.ListAthletesRequest.filter:type_name -> paralympics.athletes.v1.Filter
	7,  // 17: paralympics.athletes.v1.ListAthletesResponse.athletes:type_name -> paralympics.athletes.v1.Athlete
	38, // 18: paralympics.athletes.v1.PinnedSportsResponse.sports:type_name -> paralympics.sports.v1.Sport
	39, // 19: paralympics.athletes.v1.PinnedGamesResponse.games:type_name -> paralympics.games.v1.Game
	7,  // 20: paralympics.athletes.v1.SearchResult.athlete:type_name -> paralympics.athletes.v1.Athlete
	7,  // 21: paralympics.athletes.v1.FeaturedResponse.athletes:type_name -> paralympics.athletes.v1.Athlete
	7,  // 22: paralympics.athletes.v1.RestoreResponse.athlete:type_name -> paralympics.athletes.v1.Athlete
	13, // 23: paralympics.athletes.v1.AthleteManager.AthleteByID:input_type -> paralympics.athletes.v1.AthleteByIDRequest
	14, // 24: paralympics.athletes.v1.AthleteManager.AthleteBySlug:input_type -> paralympics.athletes.v1.AthleteBySlugRequest
	12, // 25: paralympics.athletes.v1.AthleteManager.ListAthletes:input_type -> paralympics.athletes.v1.ListAthletesRequest
	7,  // 26: paralympics.athletes.v1.AthleteManager.PutAthlete:input_type -> paralympics.athletes.v1.Athlete
	7,  // 27: paralympics.athletes.v1.AthleteManager.DeleteAthlete:input_type -> paralympics.athletes.v1.Athlete
	31, // 28: paralympics.athletes.v1.AthleteManager.Restore:input_type -> paralympics.athletes.v1.RestoreRequest
	33, // 29: paralympics.athletes.v1.AthleteManager.Purge:input_type -> paralympics.athletes.v1.PurgeRequest
	15, // 30: paralympics.athletes.v1.AthleteManager.AthleteContent:input_type -> paralympics.athletes.v1.AthleteContentRequest
	40, // 31: paralympics.athletes.v1.AthleteManager.PutAthleteContent:input_type -> paralympics.content.v1.ContentModule
	17, // 32: paralympics.athletes.v1.AthleteManager.PinSports:input_type -> paralympics.athletes.v1.PinSportsRequest
	19, // 33: paralympics.athletes.v1.AthleteManager.PinnedSports:input_type -> paralympics.athletes.v1.PinnedSportsRequest
	21, // 34: paralympics.athletes.v1.AthleteManager.PinGames:input_type -> paralympics.athletes.v1.PinGamesRequest
	23, // 35: paralympics.athletes.v1.AthleteManager.PinnedGames:input_type -> paralympics.athletes.v1.PinnedGamesRequest
	25, // 36: paralympics.athletes.v1.AthleteManager.Search:input_type -> paralympics.athletes.v1.SearchRequest
	27, // 37: paralympics.athletes.v1.AthleteManager.ToggleFeatured:input_type -> paralympics.athletes.v1.ToggleFeaturedRequest
	29, // 38: paralympics.athletes.v1.AthleteManager.Featured:input_type -> paralympics.athletes.v1.FeaturedRequest
	7,  // 39: paralympics.athletes.v1.AthleteManager.AthleteByID:output_type -> paralympics.athletes.v1.Athlete
	7,  // 40: paralympics.athletes.v1.AthleteManager.AthleteBySlug:output_type -> paralympics.athletes.v1.Athlete
	16, // 41: paralympics.athletes.v1.AthleteManager.ListAthletes:output_type -> paralympics.athletes.v1.ListAthletesResponse
	7,  // 42: paralympics.athletes.v1.AthleteManager.PutAthlete:output_type -> paralympics.athletes.v1.Athlete
	41, // 43: paralympics.athletes.v1.AthleteManager.DeleteAthlete:output_type -> google.protobuf.Empty
	32, // 44: paralympics.athletes.v1.AthleteManager.Restore:output_type -> paralympics.athletes.v1.RestoreResponse
	34, // 45: paralympics.athletes.v1.AthleteManager.Purge:output_type -> paralympics.athletes.v1.PurgeResponse
	40, // 46: paralympics.athletes.v1.AthleteManager.AthleteContent:output_type -> paralympics.content.v1.ContentModule
	40, // 47: paralympics.athletes.v1.AthleteManager.PutAthleteContent:output_type -> paralympics.content.v1.ContentModule
	18, // 48: paralympics.athletes.v1.AthleteManager.PinSports:output_type -> paralympics.athletes.v1.PinSportsResponse
	20, // 49: paralympics.athletes.v1.AthleteManager.PinnedSports:output_type -> paralympics.athletes.v1.PinnedSportsResponse
	22, // 50: paralympics.athletes.v1.AthleteManager.PinGames:output_type -> paralympics.athletes.v1.PinGamesResponse
	24, // 51: paralympics.athletes.v1.AthleteManager.PinnedGames:output_type -> paralympics.athletes.v1.PinnedGamesResponse
	26, // 52: paralympics.athletes.v1.AthleteManager.Search:output_type -> paralympics.athletes.v1.SearchResult
	28, // 53: paralympics.athletes.v1.AthleteManager.ToggleFeatured:output_type -> paralympics.athletes.v1.ToggleFeaturedResponse
	30, // 54: paralympics.athletes.v1.AthleteManager.Featured:output_type -> paralympics.athletes.v1.FeaturedResponse
	39, // [39:55] is the sub-list for method output_type
	23, // [23:39] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_athletes_v1_athlete_proto_init() }
func file_athletes_v1_athlete_proto_init() {
	if File_athletes_v1_athlete_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_athletes_v1_athlete_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Athlete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAthletesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AthleteByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AthleteBySlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AthleteContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAthletesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinSportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinSportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedSportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedSportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinGamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinGamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedGamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedGamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleFeaturedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleFeaturedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_athletes_v1_athlete_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_athletes_v1_athlete_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_athletes_v1_athlete_proto_goTypes,
		DependencyIndexes: file_athletes_v1_athlete_proto_depIdxs,
		EnumInfos:         file_athletes_v1_athlete_proto_enumTypes,
		MessageInfos:      file_athletes_v1_athlete_proto_msgTypes,
	}.Build()
	File_athletes_v1_athlete_proto = out.File
	file_athletes_v1_athlete_proto_rawDesc = nil
	file_athletes_v1_athlete_proto_goTypes = nil
	file_athletes_v1_athlete_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AthleteManagerClient is the client API for AthleteManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AthleteManagerClient interface {
	// Gets a single Athlete
	AthleteByID(ctx context.Context, in *AthleteByIDRequest, opts ...grpc.CallOption) (*Athlete, error)
	AthleteBySlug(ctx context.Context, in *AthleteBySlugRequest, opts ...grpc.CallOption) (*Athlete, error)
	// Lists all the Athletes
	ListAthletes(ctx context.Context, in *ListAthletesRequest, opts ...grpc.CallOption) (*ListAthletesResponse, error)
	// Creates or Updates an Athlete
	PutAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*Athlete, error)
	// Deletes an Athlete
	DeleteAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore an article that is soft deleted
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
	// Purge hard deletes an athlete and relations
	Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error)
	// List Athlete content
	AthleteContent(ctx context.Context, in *AthleteContentRequest, opts ...grpc.CallOption) (AthleteManager_AthleteContentClient, error)
	// Creates or Updates Athlete content
	PutAthleteContent(ctx context.Context, opts ...grpc.CallOption) (AthleteManager_PutAthleteContentClient, error)
	// PinSports pins sports to an athlete
	PinSports(ctx context.Context, in *PinSportsRequest, opts ...grpc.CallOption) (*PinSportsResponse, error)
	// PinnedSports returns the sports pinned to an athlete
	PinnedSports(ctx context.Context, in *PinnedSportsRequest, opts ...grpc.CallOption) (*PinnedSportsResponse, error)
	// PinGames pins sports to an athlete
	PinGames(ctx context.Context, in *PinGamesRequest, opts ...grpc.CallOption) (*PinGamesResponse, error)
	// PinnedGames returns the sports pinned to an athlete
	PinnedGames(ctx context.Context, in *PinnedGamesRequest, opts ...grpc.CallOption) (*PinnedGamesResponse, error)
	// Search performs a full text fuzzy search on Athletes based on names
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (AthleteManager_SearchClient, error)
	// ToggleFeatured toggles an Athletes featured state
	ToggleFeatured(ctx context.Context, in *ToggleFeaturedRequest, opts ...grpc.CallOption) (*ToggleFeaturedResponse, error)
	// Featured is a convenience method that returns featured athletes
	Featured(ctx context.Context, in *FeaturedRequest, opts ...grpc.CallOption) (*FeaturedResponse, error)
}

type athleteManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAthleteManagerClient(cc grpc.ClientConnInterface) AthleteManagerClient {
	return &athleteManagerClient{cc}
}

func (c *athleteManagerClient) AthleteByID(ctx context.Context, in *AthleteByIDRequest, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/AthleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) AthleteBySlug(ctx context.Context, in *AthleteBySlugRequest, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/AthleteBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) ListAthletes(ctx context.Context, in *ListAthletesRequest, opts ...grpc.CallOption) (*ListAthletesResponse, error) {
	out := new(ListAthletesResponse)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/ListAthletes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) PutAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/PutAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) DeleteAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/DeleteAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	out := new(RestoreResponse)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error) {
	out := new(PurgeResponse)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) AthleteContent(ctx context.Context, in *AthleteContentRequest, opts ...grpc.CallOption) (AthleteManager_AthleteContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AthleteManager_serviceDesc.Streams[0], "/paralympics.athletes.v1.AthleteManager/AthleteContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &athleteManagerAthleteContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AthleteManager_AthleteContentClient interface {
	Recv() (*v11.ContentModule, error)
	grpc.ClientStream
}

type athleteManagerAthleteContentClient struct {
	grpc.ClientStream
}

func (x *athleteManagerAthleteContentClient) Recv() (*v11.ContentModule, error) {
	m := new(v11.ContentModule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *athleteManagerClient) PutAthleteContent(ctx context.Context, opts ...grpc.CallOption) (AthleteManager_PutAthleteContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AthleteManager_serviceDesc.Streams[1], "/paralympics.athletes.v1.AthleteManager/PutAthleteContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &athleteManagerPutAthleteContentClient{stream}
	return x, nil
}

type AthleteManager_PutAthleteContentClient interface {
	Send(*v11.ContentModule) error
	Recv() (*v11.ContentModule, error)
	grpc.ClientStream
}

type athleteManagerPutAthleteContentClient struct {
	grpc.ClientStream
}

func (x *athleteManagerPutAthleteContentClient) Send(m *v11.ContentModule) error {
	return x.ClientStream.SendMsg(m)
}

func (x *athleteManagerPutAthleteContentClient) Recv() (*v11.ContentModule, error) {
	m := new(v11.ContentModule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *athleteManagerClient) PinSports(ctx context.Context, in *PinSportsRequest, opts ...grpc.CallOption) (*PinSportsResponse, error) {
	out := new(PinSportsResponse)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/PinSports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) PinnedSports(ctx context.Context, in *PinnedSportsRequest, opts ...grpc.CallOption) (*PinnedSportsResponse, error) {
	out := new(PinnedSportsResponse)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/PinnedSports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) PinGames(ctx context.Context, in *PinGamesRequest, opts ...grpc.CallOption) (*PinGamesResponse, error) {
	out := new(PinGamesResponse)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/PinGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) PinnedGames(ctx context.Context, in *PinnedGamesRequest, opts ...grpc.CallOption) (*PinnedGamesResponse, error) {
	out := new(PinnedGamesResponse)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/PinnedGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (AthleteManager_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AthleteManager_serviceDesc.Streams[2], "/paralympics.athletes.v1.AthleteManager/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &athleteManagerSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AthleteManager_SearchClient interface {
	Recv() (*SearchResult, error)
	grpc.ClientStream
}

type athleteManagerSearchClient struct {
	grpc.ClientStream
}

func (x *athleteManagerSearchClient) Recv() (*SearchResult, error) {
	m := new(SearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *athleteManagerClient) ToggleFeatured(ctx context.Context, in *ToggleFeaturedRequest, opts ...grpc.CallOption) (*ToggleFeaturedResponse, error) {
	out := new(ToggleFeaturedResponse)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/ToggleFeatured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteManagerClient) Featured(ctx context.Context, in *FeaturedRequest, opts ...grpc.CallOption) (*FeaturedResponse, error) {
	out := new(FeaturedResponse)
	err := c.cc.Invoke(ctx, "/paralympics.athletes.v1.AthleteManager/Featured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AthleteManagerServer is the server API for AthleteManager service.
type AthleteManagerServer interface {
	// Gets a single Athlete
	AthleteByID(context.Context, *AthleteByIDRequest) (*Athlete, error)
	AthleteBySlug(context.Context, *AthleteBySlugRequest) (*Athlete, error)
	// Lists all the Athletes
	ListAthletes(context.Context, *ListAthletesRequest) (*ListAthletesResponse, error)
	// Creates or Updates an Athlete
	PutAthlete(context.Context, *Athlete) (*Athlete, error)
	// Deletes an Athlete
	DeleteAthlete(context.Context, *Athlete) (*empty.Empty, error)
	// Restore an article that is soft deleted
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	// Purge hard deletes an athlete and relations
	Purge(context.Context, *PurgeRequest) (*PurgeResponse, error)
	// List Athlete content
	AthleteContent(*AthleteContentRequest, AthleteManager_AthleteContentServer) error
	// Creates or Updates Athlete content
	PutAthleteContent(AthleteManager_PutAthleteContentServer) error
	// PinSports pins sports to an athlete
	PinSports(context.Context, *PinSportsRequest) (*PinSportsResponse, error)
	// PinnedSports returns the sports pinned to an athlete
	PinnedSports(context.Context, *PinnedSportsRequest) (*PinnedSportsResponse, error)
	// PinGames pins sports to an athlete
	PinGames(context.Context, *PinGamesRequest) (*PinGamesResponse, error)
	// PinnedGames returns the sports pinned to an athlete
	PinnedGames(context.Context, *PinnedGamesRequest) (*PinnedGamesResponse, error)
	// Search performs a full text fuzzy search on Athletes based on names
	Search(*SearchRequest, AthleteManager_SearchServer) error
	// ToggleFeatured toggles an Athletes featured state
	ToggleFeatured(context.Context, *ToggleFeaturedRequest) (*ToggleFeaturedResponse, error)
	// Featured is a convenience method that returns featured athletes
	Featured(context.Context, *FeaturedRequest) (*FeaturedResponse, error)
}

// UnimplementedAthleteManagerServer can be embedded to have forward compatible implementations.
type UnimplementedAthleteManagerServer struct {
}

func (*UnimplementedAthleteManagerServer) AthleteByID(context.Context, *AthleteByIDRequest) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AthleteByID not implemented")
}
func (*UnimplementedAthleteManagerServer) AthleteBySlug(context.Context, *AthleteBySlugRequest) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AthleteBySlug not implemented")
}
func (*UnimplementedAthleteManagerServer) ListAthletes(context.Context, *ListAthletesRequest) (*ListAthletesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAthletes not implemented")
}
func (*UnimplementedAthleteManagerServer) PutAthlete(context.Context, *Athlete) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAthlete not implemented")
}
func (*UnimplementedAthleteManagerServer) DeleteAthlete(context.Context, *Athlete) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAthlete not implemented")
}
func (*UnimplementedAthleteManagerServer) Restore(context.Context, *RestoreRequest) (*RestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedAthleteManagerServer) Purge(context.Context, *PurgeRequest) (*PurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (*UnimplementedAthleteManagerServer) AthleteContent(*AthleteContentRequest, AthleteManager_AthleteContentServer) error {
	return status.Errorf(codes.Unimplemented, "method AthleteContent not implemented")
}
func (*UnimplementedAthleteManagerServer) PutAthleteContent(AthleteManager_PutAthleteContentServer) error {
	return status.Errorf(codes.Unimplemented, "method PutAthleteContent not implemented")
}
func (*UnimplementedAthleteManagerServer) PinSports(context.Context, *PinSportsRequest) (*PinSportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinSports not implemented")
}
func (*UnimplementedAthleteManagerServer) PinnedSports(context.Context, *PinnedSportsRequest) (*PinnedSportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnedSports not implemented")
}
func (*UnimplementedAthleteManagerServer) PinGames(context.Context, *PinGamesRequest) (*PinGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinGames not implemented")
}
func (*UnimplementedAthleteManagerServer) PinnedGames(context.Context, *PinnedGamesRequest) (*PinnedGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnedGames not implemented")
}
func (*UnimplementedAthleteManagerServer) Search(*SearchRequest, AthleteManager_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedAthleteManagerServer) ToggleFeatured(context.Context, *ToggleFeaturedRequest) (*ToggleFeaturedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFeatured not implemented")
}
func (*UnimplementedAthleteManagerServer) Featured(context.Context, *FeaturedRequest) (*FeaturedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Featured not implemented")
}

func RegisterAthleteManagerServer(s *grpc.Server, srv AthleteManagerServer) {
	s.RegisterService(&_AthleteManager_serviceDesc, srv)
}

func _AthleteManager_AthleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AthleteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).AthleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/AthleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).AthleteByID(ctx, req.(*AthleteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_AthleteBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AthleteBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).AthleteBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/AthleteBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).AthleteBySlug(ctx, req.(*AthleteBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_ListAthletes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAthletesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).ListAthletes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/ListAthletes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).ListAthletes(ctx, req.(*ListAthletesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_PutAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Athlete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).PutAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/PutAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).PutAthlete(ctx, req.(*Athlete))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_DeleteAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Athlete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).DeleteAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/DeleteAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).DeleteAthlete(ctx, req.(*Athlete))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).Purge(ctx, req.(*PurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_AthleteContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AthleteContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AthleteManagerServer).AthleteContent(m, &athleteManagerAthleteContentServer{stream})
}

type AthleteManager_AthleteContentServer interface {
	Send(*v11.ContentModule) error
	grpc.ServerStream
}

type athleteManagerAthleteContentServer struct {
	grpc.ServerStream
}

func (x *athleteManagerAthleteContentServer) Send(m *v11.ContentModule) error {
	return x.ServerStream.SendMsg(m)
}

func _AthleteManager_PutAthleteContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AthleteManagerServer).PutAthleteContent(&athleteManagerPutAthleteContentServer{stream})
}

type AthleteManager_PutAthleteContentServer interface {
	Send(*v11.ContentModule) error
	Recv() (*v11.ContentModule, error)
	grpc.ServerStream
}

type athleteManagerPutAthleteContentServer struct {
	grpc.ServerStream
}

func (x *athleteManagerPutAthleteContentServer) Send(m *v11.ContentModule) error {
	return x.ServerStream.SendMsg(m)
}

func (x *athleteManagerPutAthleteContentServer) Recv() (*v11.ContentModule, error) {
	m := new(v11.ContentModule)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AthleteManager_PinSports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinSportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).PinSports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/PinSports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).PinSports(ctx, req.(*PinSportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_PinnedSports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnedSportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).PinnedSports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/PinnedSports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).PinnedSports(ctx, req.(*PinnedSportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_PinGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).PinGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/PinGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).PinGames(ctx, req.(*PinGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_PinnedGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnedGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).PinnedGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/PinnedGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).PinnedGames(ctx, req.(*PinnedGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AthleteManagerServer).Search(m, &athleteManagerSearchServer{stream})
}

type AthleteManager_SearchServer interface {
	Send(*SearchResult) error
	grpc.ServerStream
}

type athleteManagerSearchServer struct {
	grpc.ServerStream
}

func (x *athleteManagerSearchServer) Send(m *SearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _AthleteManager_ToggleFeatured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFeaturedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).ToggleFeatured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/ToggleFeatured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).ToggleFeatured(ctx, req.(*ToggleFeaturedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteManager_Featured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteManagerServer).Featured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.athletes.v1.AthleteManager/Featured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteManagerServer).Featured(ctx, req.(*FeaturedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AthleteManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paralympics.athletes.v1.AthleteManager",
	HandlerType: (*AthleteManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AthleteByID",
			Handler:    _AthleteManager_AthleteByID_Handler,
		},
		{
			MethodName: "AthleteBySlug",
			Handler:    _AthleteManager_AthleteBySlug_Handler,
		},
		{
			MethodName: "ListAthletes",
			Handler:    _AthleteManager_ListAthletes_Handler,
		},
		{
			MethodName: "PutAthlete",
			Handler:    _AthleteManager_PutAthlete_Handler,
		},
		{
			MethodName: "DeleteAthlete",
			Handler:    _AthleteManager_DeleteAthlete_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _AthleteManager_Restore_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _AthleteManager_Purge_Handler,
		},
		{
			MethodName: "PinSports",
			Handler:    _AthleteManager_PinSports_Handler,
		},
		{
			MethodName: "PinnedSports",
			Handler:    _AthleteManager_PinnedSports_Handler,
		},
		{
			MethodName: "PinGames",
			Handler:    _AthleteManager_PinGames_Handler,
		},
		{
			MethodName: "PinnedGames",
			Handler:    _AthleteManager_PinnedGames_Handler,
		},
		{
			MethodName: "ToggleFeatured",
			Handler:    _AthleteManager_ToggleFeatured_Handler,
		},
		{
			MethodName: "Featured",
			Handler:    _AthleteManager_Featured_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AthleteContent",
			Handler:       _AthleteManager_AthleteContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutAthleteContent",
			Handler:       _AthleteManager_PutAthleteContent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _AthleteManager_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "athletes/v1/athlete.proto",
}
