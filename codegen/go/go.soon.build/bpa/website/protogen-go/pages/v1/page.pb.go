// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: page/v1/page.proto

package pages

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v1 "go.soon.build/bpa/website/protogen-go/content/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Collection int32

const (
	Collection_FOOTER Collection = 0
)

// Enum value maps for Collection.
var (
	Collection_name = map[int32]string{
		0: "FOOTER",
	}
	Collection_value = map[string]int32{
		"FOOTER": 0,
	}
)

func (x Collection) Enum() *Collection {
	p := new(Collection)
	*p = x
	return p
}

func (x Collection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Collection) Descriptor() protoreflect.EnumDescriptor {
	return file_page_v1_page_proto_enumTypes[0].Descriptor()
}

func (Collection) Type() protoreflect.EnumType {
	return &file_page_v1_page_proto_enumTypes[0]
}

func (x Collection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Collection.Descriptor instead.
func (Collection) EnumDescriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{0}
}

// The type of sort to apply, ascending or descending
type SortDirection int32

const (
	SortDirection_ASC SortDirection = 0
	SortDirection_DSC SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "ASC",
		1: "DSC",
	}
	SortDirection_value = map[string]int32{
		"ASC": 0,
		"DSC": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_page_v1_page_proto_enumTypes[1].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_page_v1_page_proto_enumTypes[1]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{1}
}

// Fields we can sort pages by
type SortField int32

const (
	SortField_CREATE_DATE SortField = 0
	SortField_UPDATE_DATE SortField = 1
	SortField_DELETE_DATE SortField = 2
	SortField_ORDER       SortField = 3
	SortField_TITLE       SortField = 4
)

// Enum value maps for SortField.
var (
	SortField_name = map[int32]string{
		0: "CREATE_DATE",
		1: "UPDATE_DATE",
		2: "DELETE_DATE",
		3: "ORDER",
		4: "TITLE",
	}
	SortField_value = map[string]int32{
		"CREATE_DATE": 0,
		"UPDATE_DATE": 1,
		"DELETE_DATE": 2,
		"ORDER":       3,
		"TITLE":       4,
	}
)

func (x SortField) Enum() *SortField {
	p := new(SortField)
	*p = x
	return p
}

func (x SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_page_v1_page_proto_enumTypes[2].Descriptor()
}

func (SortField) Type() protoreflect.EnumType {
	return &file_page_v1_page_proto_enumTypes[2]
}

func (x SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortField.Descriptor instead.
func (SortField) EnumDescriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{2}
}

// A generic Page stored in the content service
type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug       string               `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Title      string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	CreateDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	UpdateDate *timestamp.Timestamp `protobuf:"bytes,5,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	DeleteDate *timestamp.Timestamp `protobuf:"bytes,6,opt,name=delete_date,json=deleteDate,proto3" json:"delete_date,omitempty"`
	ImgHero    *v1.Image            `protobuf:"bytes,7,opt,name=img_hero,json=imgHero,proto3" json:"img_hero,omitempty"`
	ImgHeroAlt string               `protobuf:"bytes,8,opt,name=img_hero_alt,json=imgHeroAlt,proto3" json:"img_hero_alt,omitempty"`
	Collection Collection           `protobuf:"varint,9,opt,name=collection,proto3,enum=paralympics.pages.v1.Collection" json:"collection,omitempty"`
	Order      int64                `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{0}
}

func (x *Page) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Page) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Page) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Page) GetCreateDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *Page) GetUpdateDate() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *Page) GetDeleteDate() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteDate
	}
	return nil
}

func (x *Page) GetImgHero() *v1.Image {
	if x != nil {
		return x.ImgHero
	}
	return nil
}

func (x *Page) GetImgHeroAlt() string {
	if x != nil {
		return x.ImgHeroAlt
	}
	return ""
}

func (x *Page) GetCollection() Collection {
	if x != nil {
		return x.Collection
	}
	return Collection_FOOTER
}

func (x *Page) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

// Request for the `PageByID` method
type PageByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PageByIDRequest) Reset() {
	*x = PageByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageByIDRequest) ProtoMessage() {}

func (x *PageByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageByIDRequest.ProtoReflect.Descriptor instead.
func (*PageByIDRequest) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{1}
}

func (x *PageByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request for the `PageBySlug` method
type PageBySlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *PageBySlugRequest) Reset() {
	*x = PageBySlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageBySlugRequest) ProtoMessage() {}

func (x *PageBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageBySlugRequest.ProtoReflect.Descriptor instead.
func (*PageBySlugRequest) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{2}
}

func (x *PageBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

// Pagination
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{3}
}

func (x *Pagination) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Sort field + sort direction
type SortOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     SortField     `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.pages.v1.SortField" json:"field,omitempty"`
	Direction SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=paralympics.pages.v1.SortDirection" json:"direction,omitempty"`
}

func (x *SortOption) Reset() {
	*x = SortOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOption) ProtoMessage() {}

func (x *SortOption) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOption.ProtoReflect.Descriptor instead.
func (*SortOption) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{4}
}

func (x *SortOption) GetField() SortField {
	if x != nil {
		return x.Field
	}
	return SortField_CREATE_DATE
}

func (x *SortOption) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_ASC
}

// Fields we can filter pages by
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search by deleted state
	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Search by collection
	Collection Collection `protobuf:"varint,2,opt,name=collection,proto3,enum=paralympics.pages.v1.Collection" json:"collection,omitempty"`
	// Search for sub-pages by parent
	ParentId string `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{5}
}

func (x *Filter) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Filter) GetCollection() Collection {
	if x != nil {
		return x.Collection
	}
	return Collection_FOOTER
}

func (x *Filter) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

// Get paginaged list of Pages
type ListPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination   `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"` // Paginated response
	Sort       []*SortOption `protobuf:"bytes,2,rep,name=sort,proto3" json:"sort,omitempty"`             // Sort response
	Filter     *Filter       `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`         // Filter pages
}

func (x *ListPagesRequest) Reset() {
	*x = ListPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPagesRequest) ProtoMessage() {}

func (x *ListPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPagesRequest.ProtoReflect.Descriptor instead.
func (*ListPagesRequest) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{6}
}

func (x *ListPagesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListPagesRequest) GetSort() []*SortOption {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListPagesRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Request for getting content by Page ID which is a UUID v4
type PageContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId   string `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	PageSlug string `protobuf:"bytes,2,opt,name=page_slug,json=pageSlug,proto3" json:"page_slug,omitempty"`
}

func (x *PageContentRequest) Reset() {
	*x = PageContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageContentRequest) ProtoMessage() {}

func (x *PageContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageContentRequest.ProtoReflect.Descriptor instead.
func (*PageContentRequest) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{7}
}

func (x *PageContentRequest) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *PageContentRequest) GetPageSlug() string {
	if x != nil {
		return x.PageSlug
	}
	return ""
}

// Response for ListPages
type ListPagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages []*Page `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
	Total int64   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // Total number of pages that match the search
}

func (x *ListPagesResponse) Reset() {
	*x = ListPagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPagesResponse) ProtoMessage() {}

func (x *ListPagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPagesResponse.ProtoReflect.Descriptor instead.
func (*ListPagesResponse) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{8}
}

func (x *ListPagesResponse) GetPages() []*Page {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *ListPagesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Request for reordering a page
type ReorderPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId string `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Order  int64  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ReorderPageRequest) Reset() {
	*x = ReorderPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_v1_page_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReorderPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReorderPageRequest) ProtoMessage() {}

func (x *ReorderPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_page_v1_page_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReorderPageRequest.ProtoReflect.Descriptor instead.
func (*ReorderPageRequest) Descriptor() ([]byte, []int) {
	return file_page_v1_page_proto_rawDescGZIP(), []int{9}
}

func (x *ReorderPageRequest) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *ReorderPageRequest) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

var File_page_v1_page_proto protoreflect.FileDescriptor

var file_page_v1_page_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xab, 0x03, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x69, 0x6d, 0x67, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x69,
	0x6d, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x67, 0x5f, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d,
	0x67, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x21, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x36, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x6c, 0x75, 0x67,
	0x22, 0x5b, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x43, 0x0a,
	0x12, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2a, 0x18, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x00, 0x2a, 0x21, 0x0a, 0x0d,
	0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x43, 0x10, 0x01, 0x2a,
	0x54, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x10, 0x04, 0x32, 0xb9, 0x05, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x07, 0x50,
	0x75, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0b, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x0e, 0x50,
	0x75, 0x74, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x6f, 0x2e, 0x73, 0x6f, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x2f, 0x62, 0x70, 0x61, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_page_v1_page_proto_rawDescOnce sync.Once
	file_page_v1_page_proto_rawDescData = file_page_v1_page_proto_rawDesc
)

func file_page_v1_page_proto_rawDescGZIP() []byte {
	file_page_v1_page_proto_rawDescOnce.Do(func() {
		file_page_v1_page_proto_rawDescData = protoimpl.X.CompressGZIP(file_page_v1_page_proto_rawDescData)
	})
	return file_page_v1_page_proto_rawDescData
}

var file_page_v1_page_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_page_v1_page_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_page_v1_page_proto_goTypes = []interface{}{
	(Collection)(0),             // 0: paralympics.pages.v1.Collection
	(SortDirection)(0),          // 1: paralympics.pages.v1.SortDirection
	(SortField)(0),              // 2: paralympics.pages.v1.SortField
	(*Page)(nil),                // 3: paralympics.pages.v1.Page
	(*PageByIDRequest)(nil),     // 4: paralympics.pages.v1.PageByIDRequest
	(*PageBySlugRequest)(nil),   // 5: paralympics.pages.v1.PageBySlugRequest
	(*Pagination)(nil),          // 6: paralympics.pages.v1.Pagination
	(*SortOption)(nil),          // 7: paralympics.pages.v1.SortOption
	(*Filter)(nil),              // 8: paralympics.pages.v1.Filter
	(*ListPagesRequest)(nil),    // 9: paralympics.pages.v1.ListPagesRequest
	(*PageContentRequest)(nil),  // 10: paralympics.pages.v1.PageContentRequest
	(*ListPagesResponse)(nil),   // 11: paralympics.pages.v1.ListPagesResponse
	(*ReorderPageRequest)(nil),  // 12: paralympics.pages.v1.ReorderPageRequest
	(*timestamp.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*v1.Image)(nil),            // 14: paralympics.content.v1.Image
	(*v1.ContentModule)(nil),    // 15: paralympics.content.v1.ContentModule
	(*empty.Empty)(nil),         // 16: google.protobuf.Empty
}
var file_page_v1_page_proto_depIdxs = []int32{
	13, // 0: paralympics.pages.v1.Page.create_date:type_name -> google.protobuf.Timestamp
	13, // 1: paralympics.pages.v1.Page.update_date:type_name -> google.protobuf.Timestamp
	13, // 2: paralympics.pages.v1.Page.delete_date:type_name -> google.protobuf.Timestamp
	14, // 3: paralympics.pages.v1.Page.img_hero:type_name -> paralympics.content.v1.Image
	0,  // 4: paralympics.pages.v1.Page.collection:type_name -> paralympics.pages.v1.Collection
	2,  // 5: paralympics.pages.v1.SortOption.field:type_name -> paralympics.pages.v1.SortField
	1,  // 6: paralympics.pages.v1.SortOption.direction:type_name -> paralympics.pages.v1.SortDirection
	0,  // 7: paralympics.pages.v1.Filter.collection:type_name -> paralympics.pages.v1.Collection
	6,  // 8: paralympics.pages.v1.ListPagesRequest.pagination:type_name -> paralympics.pages.v1.Pagination
	7,  // 9: paralympics.pages.v1.ListPagesRequest.sort:type_name -> paralympics.pages.v1.SortOption
	8,  // 10: paralympics.pages.v1.ListPagesRequest.filter:type_name -> paralympics.pages.v1.Filter
	3,  // 11: paralympics.pages.v1.ListPagesResponse.pages:type_name -> paralympics.pages.v1.Page
	4,  // 12: paralympics.pages.v1.PageManager.PageByID:input_type -> paralympics.pages.v1.PageByIDRequest
	5,  // 13: paralympics.pages.v1.PageManager.PageBySlug:input_type -> paralympics.pages.v1.PageBySlugRequest
	9,  // 14: paralympics.pages.v1.PageManager.ListPages:input_type -> paralympics.pages.v1.ListPagesRequest
	3,  // 15: paralympics.pages.v1.PageManager.PutPage:input_type -> paralympics.pages.v1.Page
	3,  // 16: paralympics.pages.v1.PageManager.DeletePage:input_type -> paralympics.pages.v1.Page
	12, // 17: paralympics.pages.v1.PageManager.ReorderPage:input_type -> paralympics.pages.v1.ReorderPageRequest
	10, // 18: paralympics.pages.v1.PageManager.PageContent:input_type -> paralympics.pages.v1.PageContentRequest
	15, // 19: paralympics.pages.v1.PageManager.PutPageContent:input_type -> paralympics.content.v1.ContentModule
	3,  // 20: paralympics.pages.v1.PageManager.PageByID:output_type -> paralympics.pages.v1.Page
	3,  // 21: paralympics.pages.v1.PageManager.PageBySlug:output_type -> paralympics.pages.v1.Page
	11, // 22: paralympics.pages.v1.PageManager.ListPages:output_type -> paralympics.pages.v1.ListPagesResponse
	3,  // 23: paralympics.pages.v1.PageManager.PutPage:output_type -> paralympics.pages.v1.Page
	16, // 24: paralympics.pages.v1.PageManager.DeletePage:output_type -> google.protobuf.Empty
	16, // 25: paralympics.pages.v1.PageManager.ReorderPage:output_type -> google.protobuf.Empty
	15, // 26: paralympics.pages.v1.PageManager.PageContent:output_type -> paralympics.content.v1.ContentModule
	15, // 27: paralympics.pages.v1.PageManager.PutPageContent:output_type -> paralympics.content.v1.ContentModule
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_page_v1_page_proto_init() }
func file_page_v1_page_proto_init() {
	if File_page_v1_page_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_page_v1_page_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_v1_page_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_v1_page_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageBySlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_v1_page_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_v1_page_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_v1_page_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_v1_page_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_v1_page_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_v1_page_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_v1_page_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReorderPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_page_v1_page_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_page_v1_page_proto_goTypes,
		DependencyIndexes: file_page_v1_page_proto_depIdxs,
		EnumInfos:         file_page_v1_page_proto_enumTypes,
		MessageInfos:      file_page_v1_page_proto_msgTypes,
	}.Build()
	File_page_v1_page_proto = out.File
	file_page_v1_page_proto_rawDesc = nil
	file_page_v1_page_proto_goTypes = nil
	file_page_v1_page_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PageManagerClient is the client API for PageManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PageManagerClient interface {
	// Get a page by it's unique by UUID
	PageByID(ctx context.Context, in *PageByIDRequest, opts ...grpc.CallOption) (*Page, error)
	// Get a page by it's unique slug
	PageBySlug(ctx context.Context, in *PageBySlugRequest, opts ...grpc.CallOption) (*Page, error)
	// Lists all the Pages
	ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error)
	// Creates or Updates a page
	PutPage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error)
	// Deletes an page
	DeletePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*empty.Empty, error)
	// Reorders pages in a collection
	ReorderPage(ctx context.Context, in *ReorderPageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// List page content
	PageContent(ctx context.Context, in *PageContentRequest, opts ...grpc.CallOption) (PageManager_PageContentClient, error)
	// Creates or Updates page content
	PutPageContent(ctx context.Context, opts ...grpc.CallOption) (PageManager_PutPageContentClient, error)
}

type pageManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPageManagerClient(cc grpc.ClientConnInterface) PageManagerClient {
	return &pageManagerClient{cc}
}

func (c *pageManagerClient) PageByID(ctx context.Context, in *PageByIDRequest, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/paralympics.pages.v1.PageManager/PageByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagerClient) PageBySlug(ctx context.Context, in *PageBySlugRequest, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/paralympics.pages.v1.PageManager/PageBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagerClient) ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error) {
	out := new(ListPagesResponse)
	err := c.cc.Invoke(ctx, "/paralympics.pages.v1.PageManager/ListPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagerClient) PutPage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/paralympics.pages.v1.PageManager/PutPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagerClient) DeletePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/paralympics.pages.v1.PageManager/DeletePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagerClient) ReorderPage(ctx context.Context, in *ReorderPageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/paralympics.pages.v1.PageManager/ReorderPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagerClient) PageContent(ctx context.Context, in *PageContentRequest, opts ...grpc.CallOption) (PageManager_PageContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PageManager_serviceDesc.Streams[0], "/paralympics.pages.v1.PageManager/PageContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &pageManagerPageContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PageManager_PageContentClient interface {
	Recv() (*v1.ContentModule, error)
	grpc.ClientStream
}

type pageManagerPageContentClient struct {
	grpc.ClientStream
}

func (x *pageManagerPageContentClient) Recv() (*v1.ContentModule, error) {
	m := new(v1.ContentModule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pageManagerClient) PutPageContent(ctx context.Context, opts ...grpc.CallOption) (PageManager_PutPageContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PageManager_serviceDesc.Streams[1], "/paralympics.pages.v1.PageManager/PutPageContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &pageManagerPutPageContentClient{stream}
	return x, nil
}

type PageManager_PutPageContentClient interface {
	Send(*v1.ContentModule) error
	Recv() (*v1.ContentModule, error)
	grpc.ClientStream
}

type pageManagerPutPageContentClient struct {
	grpc.ClientStream
}

func (x *pageManagerPutPageContentClient) Send(m *v1.ContentModule) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pageManagerPutPageContentClient) Recv() (*v1.ContentModule, error) {
	m := new(v1.ContentModule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PageManagerServer is the server API for PageManager service.
type PageManagerServer interface {
	// Get a page by it's unique by UUID
	PageByID(context.Context, *PageByIDRequest) (*Page, error)
	// Get a page by it's unique slug
	PageBySlug(context.Context, *PageBySlugRequest) (*Page, error)
	// Lists all the Pages
	ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error)
	// Creates or Updates a page
	PutPage(context.Context, *Page) (*Page, error)
	// Deletes an page
	DeletePage(context.Context, *Page) (*empty.Empty, error)
	// Reorders pages in a collection
	ReorderPage(context.Context, *ReorderPageRequest) (*empty.Empty, error)
	// List page content
	PageContent(*PageContentRequest, PageManager_PageContentServer) error
	// Creates or Updates page content
	PutPageContent(PageManager_PutPageContentServer) error
}

// UnimplementedPageManagerServer can be embedded to have forward compatible implementations.
type UnimplementedPageManagerServer struct {
}

func (*UnimplementedPageManagerServer) PageByID(context.Context, *PageByIDRequest) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageByID not implemented")
}
func (*UnimplementedPageManagerServer) PageBySlug(context.Context, *PageBySlugRequest) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageBySlug not implemented")
}
func (*UnimplementedPageManagerServer) ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPages not implemented")
}
func (*UnimplementedPageManagerServer) PutPage(context.Context, *Page) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPage not implemented")
}
func (*UnimplementedPageManagerServer) DeletePage(context.Context, *Page) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (*UnimplementedPageManagerServer) ReorderPage(context.Context, *ReorderPageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderPage not implemented")
}
func (*UnimplementedPageManagerServer) PageContent(*PageContentRequest, PageManager_PageContentServer) error {
	return status.Errorf(codes.Unimplemented, "method PageContent not implemented")
}
func (*UnimplementedPageManagerServer) PutPageContent(PageManager_PutPageContentServer) error {
	return status.Errorf(codes.Unimplemented, "method PutPageContent not implemented")
}

func RegisterPageManagerServer(s *grpc.Server, srv PageManagerServer) {
	s.RegisterService(&_PageManager_serviceDesc, srv)
}

func _PageManager_PageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagerServer).PageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.pages.v1.PageManager/PageByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagerServer).PageByID(ctx, req.(*PageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManager_PageBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagerServer).PageBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.pages.v1.PageManager/PageBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagerServer).PageBySlug(ctx, req.(*PageBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManager_ListPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagerServer).ListPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.pages.v1.PageManager/ListPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagerServer).ListPages(ctx, req.(*ListPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManager_PutPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagerServer).PutPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.pages.v1.PageManager/PutPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagerServer).PutPage(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManager_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagerServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.pages.v1.PageManager/DeletePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagerServer).DeletePage(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManager_ReorderPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagerServer).ReorderPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.pages.v1.PageManager/ReorderPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagerServer).ReorderPage(ctx, req.(*ReorderPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManager_PageContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PageContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PageManagerServer).PageContent(m, &pageManagerPageContentServer{stream})
}

type PageManager_PageContentServer interface {
	Send(*v1.ContentModule) error
	grpc.ServerStream
}

type pageManagerPageContentServer struct {
	grpc.ServerStream
}

func (x *pageManagerPageContentServer) Send(m *v1.ContentModule) error {
	return x.ServerStream.SendMsg(m)
}

func _PageManager_PutPageContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PageManagerServer).PutPageContent(&pageManagerPutPageContentServer{stream})
}

type PageManager_PutPageContentServer interface {
	Send(*v1.ContentModule) error
	Recv() (*v1.ContentModule, error)
	grpc.ServerStream
}

type pageManagerPutPageContentServer struct {
	grpc.ServerStream
}

func (x *pageManagerPutPageContentServer) Send(m *v1.ContentModule) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pageManagerPutPageContentServer) Recv() (*v1.ContentModule, error) {
	m := new(v1.ContentModule)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PageManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paralympics.pages.v1.PageManager",
	HandlerType: (*PageManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageByID",
			Handler:    _PageManager_PageByID_Handler,
		},
		{
			MethodName: "PageBySlug",
			Handler:    _PageManager_PageBySlug_Handler,
		},
		{
			MethodName: "ListPages",
			Handler:    _PageManager_ListPages_Handler,
		},
		{
			MethodName: "PutPage",
			Handler:    _PageManager_PutPage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _PageManager_DeletePage_Handler,
		},
		{
			MethodName: "ReorderPage",
			Handler:    _PageManager_ReorderPage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PageContent",
			Handler:       _PageManager_PageContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutPageContent",
			Handler:       _PageManager_PutPageContent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "page/v1/page.proto",
}
