// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: articles/v1/article.proto

package articles

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v11 "go.soon.build/bpa/website/protogen-go/athletes/v1"
	v1 "go.soon.build/bpa/website/protogen-go/content/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Fields we can sort articles by
type SortField int32

const (
	SortField_CREATE_DATE   SortField = 0
	SortField_UPDATE_DATE   SortField = 1
	SortField_DELETE_DATE   SortField = 2
	SortField_PUBLISH_FROM  SortField = 3
	SortField_PUBLISH_UNTIL SortField = 4
	SortField_PUBLISHED     SortField = 5
	SortField_TITLE         SortField = 6
)

// Enum value maps for SortField.
var (
	SortField_name = map[int32]string{
		0: "CREATE_DATE",
		1: "UPDATE_DATE",
		2: "DELETE_DATE",
		3: "PUBLISH_FROM",
		4: "PUBLISH_UNTIL",
		5: "PUBLISHED",
		6: "TITLE",
	}
	SortField_value = map[string]int32{
		"CREATE_DATE":   0,
		"UPDATE_DATE":   1,
		"DELETE_DATE":   2,
		"PUBLISH_FROM":  3,
		"PUBLISH_UNTIL": 4,
		"PUBLISHED":     5,
		"TITLE":         6,
	}
)

func (x SortField) Enum() *SortField {
	p := new(SortField)
	*p = x
	return p
}

func (x SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_articles_v1_article_proto_enumTypes[0].Descriptor()
}

func (SortField) Type() protoreflect.EnumType {
	return &file_articles_v1_article_proto_enumTypes[0]
}

func (x SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortField.Descriptor instead.
func (SortField) EnumDescriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{0}
}

// PinnedFilter are used for filter articles by their pinned state
type PinnedFilter int32

const (
	PinnedFilter_ALL        PinnedFilter = 0
	PinnedFilter_PINNED     PinnedFilter = 1
	PinnedFilter_NOT_PINNED PinnedFilter = 2
)

// Enum value maps for PinnedFilter.
var (
	PinnedFilter_name = map[int32]string{
		0: "ALL",
		1: "PINNED",
		2: "NOT_PINNED",
	}
	PinnedFilter_value = map[string]int32{
		"ALL":        0,
		"PINNED":     1,
		"NOT_PINNED": 2,
	}
)

func (x PinnedFilter) Enum() *PinnedFilter {
	p := new(PinnedFilter)
	*p = x
	return p
}

func (x PinnedFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PinnedFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_articles_v1_article_proto_enumTypes[1].Descriptor()
}

func (PinnedFilter) Type() protoreflect.EnumType {
	return &file_articles_v1_article_proto_enumTypes[1]
}

func (x PinnedFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PinnedFilter.Descriptor instead.
func (PinnedFilter) EnumDescriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{1}
}

// The type of sort to apply, ascending or descending
type SortDirection int32

const (
	SortDirection_ASC SortDirection = 0
	SortDirection_DSC SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "ASC",
		1: "DSC",
	}
	SortDirection_value = map[string]int32{
		"ASC": 0,
		"DSC": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_articles_v1_article_proto_enumTypes[2].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_articles_v1_article_proto_enumTypes[2]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{2}
}

// Field mapping used in validation errors
type Field int32

const (
	Field_ArticleId           Field = 0
	Field_ArticleSlug         Field = 1
	Field_ArticleTitle        Field = 2
	Field_ArticleBlurb        Field = 3
	Field_ArticlePublishFrom  Field = 4
	Field_ArticlePublishUntil Field = 5
	Field_ArticleImageCard    Field = 6
	Field_ArticleImageHero    Field = 7
)

// Enum value maps for Field.
var (
	Field_name = map[int32]string{
		0: "ArticleId",
		1: "ArticleSlug",
		2: "ArticleTitle",
		3: "ArticleBlurb",
		4: "ArticlePublishFrom",
		5: "ArticlePublishUntil",
		6: "ArticleImageCard",
		7: "ArticleImageHero",
	}
	Field_value = map[string]int32{
		"ArticleId":           0,
		"ArticleSlug":         1,
		"ArticleTitle":        2,
		"ArticleBlurb":        3,
		"ArticlePublishFrom":  4,
		"ArticlePublishUntil": 5,
		"ArticleImageCard":    6,
		"ArticleImageHero":    7,
	}
)

func (x Field) Enum() *Field {
	p := new(Field)
	*p = x
	return p
}

func (x Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field) Descriptor() protoreflect.EnumDescriptor {
	return file_articles_v1_article_proto_enumTypes[3].Descriptor()
}

func (Field) Type() protoreflect.EnumType {
	return &file_articles_v1_article_proto_enumTypes[3]
}

func (x Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field.Descriptor instead.
func (Field) EnumDescriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{3}
}

// Error Codes returned as part of validation errors
type ErrorCode int32

const (
	// Generic error codes
	ErrorCode_Required      ErrorCode = 0
	ErrorCode_InvalidUUIDv4 ErrorCode = 1
	ErrorCode_InvalidURI    ErrorCode = 2
	// Publishing error codes
	ErrorCode_PublishUntilGTPublishFrom ErrorCode = 3
	// Image error codes
	ErrorCode_ImageInvalid ErrorCode = 4
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "Required",
		1: "InvalidUUIDv4",
		2: "InvalidURI",
		3: "PublishUntilGTPublishFrom",
		4: "ImageInvalid",
	}
	ErrorCode_value = map[string]int32{
		"Required":                  0,
		"InvalidUUIDv4":             1,
		"InvalidURI":                2,
		"PublishUntilGTPublishFrom": 3,
		"ImageInvalid":              4,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_articles_v1_article_proto_enumTypes[4].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_articles_v1_article_proto_enumTypes[4]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{4}
}

// Category represents categorisation of articles
type Category int32

const (
	Category_NONE                Category = 0
	Category_SUPPORT_FUNDRAISING Category = 1
	Category_SUPPORT_EVENTS      Category = 2
	Category_SUPPORT_CORPORATE   Category = 3
	Category_SUPPORT_GIFTS       Category = 4
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0: "NONE",
		1: "SUPPORT_FUNDRAISING",
		2: "SUPPORT_EVENTS",
		3: "SUPPORT_CORPORATE",
		4: "SUPPORT_GIFTS",
	}
	Category_value = map[string]int32{
		"NONE":                0,
		"SUPPORT_FUNDRAISING": 1,
		"SUPPORT_EVENTS":      2,
		"SUPPORT_CORPORATE":   3,
		"SUPPORT_GIFTS":       4,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_articles_v1_article_proto_enumTypes[5].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_articles_v1_article_proto_enumTypes[5]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{5}
}

// An Article stored in the content service
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug         string               `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	CreateDate   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	UpdateDate   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	DeleteDate   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=delete_date,json=deleteDate,proto3" json:"delete_date,omitempty"`
	Title        string               `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Blurb        string               `protobuf:"bytes,7,opt,name=blurb,proto3" json:"blurb,omitempty"`
	Published    bool                 `protobuf:"varint,8,opt,name=published,proto3" json:"published,omitempty"`
	Featured     bool                 `protobuf:"varint,9,opt,name=featured,proto3" json:"featured,omitempty"`
	PublishFrom  *timestamp.Timestamp `protobuf:"bytes,10,opt,name=publish_from,json=publishFrom,proto3" json:"publish_from,omitempty"`
	PublishUntil *timestamp.Timestamp `protobuf:"bytes,11,opt,name=publish_until,json=publishUntil,proto3" json:"publish_until,omitempty"`
	GameId       string               `protobuf:"bytes,12,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	SportId      string               `protobuf:"bytes,13,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	Live         bool                 `protobuf:"varint,14,opt,name=live,proto3" json:"live,omitempty"`
	ImgCard      *v1.Image            `protobuf:"bytes,15,opt,name=img_card,json=imgCard,proto3" json:"img_card,omitempty"`
	ImgHero      *v1.Image            `protobuf:"bytes,16,opt,name=img_hero,json=imgHero,proto3" json:"img_hero,omitempty"`
	Rich         bool                 `protobuf:"varint,17,opt,name=rich,proto3" json:"rich,omitempty"`
	ImgCardAlt   string               `protobuf:"bytes,18,opt,name=img_card_alt,json=imgCardAlt,proto3" json:"img_card_alt,omitempty"`
	ImgHeroAlt   string               `protobuf:"bytes,19,opt,name=img_hero_alt,json=imgHeroAlt,proto3" json:"img_hero_alt,omitempty"`
	Pinned       bool                 `protobuf:"varint,20,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Category     Category             `protobuf:"varint,21,opt,name=category,proto3,enum=paralympics.articles.v1.Category" json:"category,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{0}
}

func (x *Article) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Article) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Article) GetCreateDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *Article) GetUpdateDate() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *Article) GetDeleteDate() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteDate
	}
	return nil
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetBlurb() string {
	if x != nil {
		return x.Blurb
	}
	return ""
}

func (x *Article) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

func (x *Article) GetFeatured() bool {
	if x != nil {
		return x.Featured
	}
	return false
}

func (x *Article) GetPublishFrom() *timestamp.Timestamp {
	if x != nil {
		return x.PublishFrom
	}
	return nil
}

func (x *Article) GetPublishUntil() *timestamp.Timestamp {
	if x != nil {
		return x.PublishUntil
	}
	return nil
}

func (x *Article) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *Article) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *Article) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *Article) GetImgCard() *v1.Image {
	if x != nil {
		return x.ImgCard
	}
	return nil
}

func (x *Article) GetImgHero() *v1.Image {
	if x != nil {
		return x.ImgHero
	}
	return nil
}

func (x *Article) GetRich() bool {
	if x != nil {
		return x.Rich
	}
	return false
}

func (x *Article) GetImgCardAlt() string {
	if x != nil {
		return x.ImgCardAlt
	}
	return ""
}

func (x *Article) GetImgHeroAlt() string {
	if x != nil {
		return x.ImgHeroAlt
	}
	return ""
}

func (x *Article) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *Article) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_NONE
}

// Sort field + sort direction
type SortOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     SortField     `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.articles.v1.SortField" json:"field,omitempty"`
	Direction SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=paralympics.articles.v1.SortDirection" json:"direction,omitempty"`
}

func (x *SortOption) Reset() {
	*x = SortOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOption) ProtoMessage() {}

func (x *SortOption) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOption.ProtoReflect.Descriptor instead.
func (*SortOption) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{1}
}

func (x *SortOption) GetField() SortField {
	if x != nil {
		return x.Field
	}
	return SortField_CREATE_DATE
}

func (x *SortOption) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_ASC
}

// Fields we can filter articles by
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// // Search by live state
	Live bool `protobuf:"varint,1,opt,name=live,proto3" json:"live,omitempty"`
	// Search by deleted state
	Deleted bool `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Search by game id
	GameId string `protobuf:"bytes,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// Search by sport id
	SportId string `protobuf:"bytes,4,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	// Search by athlete id
	AthleteId string `protobuf:"bytes,5,opt,name=athlete_id,json=athleteId,proto3" json:"athlete_id,omitempty"`
	// If true, only un articles not featured are returned, dedfault false
	NotFeatured bool `protobuf:"varint,6,opt,name=not_featured,json=notFeatured,proto3" json:"not_featured,omitempty"`
	// Filter articles by their pinned state
	Pinned PinnedFilter `protobuf:"varint,7,opt,name=pinned,proto3,enum=paralympics.articles.v1.PinnedFilter" json:"pinned,omitempty"`
	// Filter articles by category
	Category Category `protobuf:"varint,8,opt,name=category,proto3,enum=paralympics.articles.v1.Category" json:"category,omitempty"`
	// Filter articles by title
	Title string `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{2}
}

func (x *Filter) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *Filter) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Filter) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *Filter) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *Filter) GetAthleteId() string {
	if x != nil {
		return x.AthleteId
	}
	return ""
}

func (x *Filter) GetNotFeatured() bool {
	if x != nil {
		return x.NotFeatured
	}
	return false
}

func (x *Filter) GetPinned() PinnedFilter {
	if x != nil {
		return x.Pinned
	}
	return PinnedFilter_ALL
}

func (x *Filter) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_NONE
}

func (x *Filter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Request for the `ArticleByID` method
type ArticleByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ArticleByIDRequest) Reset() {
	*x = ArticleByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleByIDRequest) ProtoMessage() {}

func (x *ArticleByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleByIDRequest.ProtoReflect.Descriptor instead.
func (*ArticleByIDRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{3}
}

func (x *ArticleByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request for the `ArticleBySlug` method
type ArticleBySlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *ArticleBySlugRequest) Reset() {
	*x = ArticleBySlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleBySlugRequest) ProtoMessage() {}

func (x *ArticleBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleBySlugRequest.ProtoReflect.Descriptor instead.
func (*ArticleBySlugRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{4}
}

func (x *ArticleBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

// Pagination
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{5}
}

func (x *Pagination) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Get paginaged list of Articles
type ListArticlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination   `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"` // Paginated response
	Sort       []*SortOption `protobuf:"bytes,2,rep,name=sort,proto3" json:"sort,omitempty"`             // Sort response
	Filter     *Filter       `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`         // Filter articles
}

func (x *ListArticlesRequest) Reset() {
	*x = ListArticlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticlesRequest) ProtoMessage() {}

func (x *ListArticlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticlesRequest.ProtoReflect.Descriptor instead.
func (*ListArticlesRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{6}
}

func (x *ListArticlesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListArticlesRequest) GetSort() []*SortOption {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListArticlesRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Request for getting content by Article ID which is a UUID v4
type ArticleContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId   string `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	ArticleSlug string `protobuf:"bytes,2,opt,name=article_slug,json=articleSlug,proto3" json:"article_slug,omitempty"`
}

func (x *ArticleContentRequest) Reset() {
	*x = ArticleContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleContentRequest) ProtoMessage() {}

func (x *ArticleContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleContentRequest.ProtoReflect.Descriptor instead.
func (*ArticleContentRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{7}
}

func (x *ArticleContentRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *ArticleContentRequest) GetArticleSlug() string {
	if x != nil {
		return x.ArticleSlug
	}
	return ""
}

// Request for [TogglePublished](paralympics.article.v1.ArticleManager.TogglePublished)
type TogglePublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the article to toggle published state for
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TogglePublishRequest) Reset() {
	*x = TogglePublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TogglePublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TogglePublishRequest) ProtoMessage() {}

func (x *TogglePublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TogglePublishRequest.ProtoReflect.Descriptor instead.
func (*TogglePublishRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{8}
}

func (x *TogglePublishRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [TogglePublished](paralympics.article.v1.ArticleManager.TogglePublished)
type TogglePublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current published state
	Published bool `protobuf:"varint,1,opt,name=published,proto3" json:"published,omitempty"`
}

func (x *TogglePublishResponse) Reset() {
	*x = TogglePublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TogglePublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TogglePublishResponse) ProtoMessage() {}

func (x *TogglePublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TogglePublishResponse.ProtoReflect.Descriptor instead.
func (*TogglePublishResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{9}
}

func (x *TogglePublishResponse) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

// Response for ListArticles
type ListArticlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Articles []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
	Total    int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // Total number of articles that match the search
}

func (x *ListArticlesResponse) Reset() {
	*x = ListArticlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticlesResponse) ProtoMessage() {}

func (x *ListArticlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticlesResponse.ProtoReflect.Descriptor instead.
func (*ListArticlesResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{10}
}

func (x *ListArticlesResponse) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

func (x *ListArticlesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Field Validation Error
type FieldError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field the error occured on
	Field Field `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.articles.v1.Field" json:"field,omitempty"`
	// Error that occured
	Code ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=paralympics.articles.v1.ErrorCode" json:"code,omitempty"`
}

func (x *FieldError) Reset() {
	*x = FieldError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldError) ProtoMessage() {}

func (x *FieldError) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldError.ProtoReflect.Descriptor instead.
func (*FieldError) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{11}
}

func (x *FieldError) GetField() Field {
	if x != nil {
		return x.Field
	}
	return Field_ArticleId
}

func (x *FieldError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_Required
}

// Validation error response messages
type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Validation errors that occured
	Errors []*FieldError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{12}
}

func (x *ValidationError) GetErrors() []*FieldError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Request for [FeatureArticle](paralympics.articles.v1.ArticleManager.FeatureArticle)
type FeatureArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Article ID to feature
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FeatureArticleRequest) Reset() {
	*x = FeatureArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureArticleRequest) ProtoMessage() {}

func (x *FeatureArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureArticleRequest.ProtoReflect.Descriptor instead.
func (*FeatureArticleRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{13}
}

func (x *FeatureArticleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [FeatureArticle](paralympics.articles.v1.ArticleManager.FeatureArticle)
type FeatureArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates if the article has been featured - check the error state if false
	Featured bool `protobuf:"varint,1,opt,name=featured,proto3" json:"featured,omitempty"`
}

func (x *FeatureArticleResponse) Reset() {
	*x = FeatureArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureArticleResponse) ProtoMessage() {}

func (x *FeatureArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureArticleResponse.ProtoReflect.Descriptor instead.
func (*FeatureArticleResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{14}
}

func (x *FeatureArticleResponse) GetFeatured() bool {
	if x != nil {
		return x.Featured
	}
	return false
}

// Request for [FeaturedArticle](paralympics.articles.v1.ArticleManager.FeaturedArticle)
type FeaturedArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FeaturedArticleRequest) Reset() {
	*x = FeaturedArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturedArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturedArticleRequest) ProtoMessage() {}

func (x *FeaturedArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturedArticleRequest.ProtoReflect.Descriptor instead.
func (*FeaturedArticleRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{15}
}

// Response for [FeaturedArticle](paralympics.articles.v1.ArticleManager.FeaturedArticle)
type FeaturedArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The featured article
	Article *Article `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
}

func (x *FeaturedArticleResponse) Reset() {
	*x = FeaturedArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturedArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturedArticleResponse) ProtoMessage() {}

func (x *FeaturedArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturedArticleResponse.ProtoReflect.Descriptor instead.
func (*FeaturedArticleResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{16}
}

func (x *FeaturedArticleResponse) GetArticle() *Article {
	if x != nil {
		return x.Article
	}
	return nil
}

// Request for [LiveArticles](paralympics.articles.v1.ArticleManager.LiveArticles)
type LiveArticlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paginaton live articles
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Filter live articles
	Filter *Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *LiveArticlesRequest) Reset() {
	*x = LiveArticlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveArticlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveArticlesRequest) ProtoMessage() {}

func (x *LiveArticlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveArticlesRequest.ProtoReflect.Descriptor instead.
func (*LiveArticlesRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{17}
}

func (x *LiveArticlesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *LiveArticlesRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Response for [LiveArticles](paralympics.articles.v1.ArticleManager.LiveArticles)
type LiveArticlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of live articles
	Articles []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
	// Total number of articles
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *LiveArticlesResponse) Reset() {
	*x = LiveArticlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveArticlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveArticlesResponse) ProtoMessage() {}

func (x *LiveArticlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveArticlesResponse.ProtoReflect.Descriptor instead.
func (*LiveArticlesResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{18}
}

func (x *LiveArticlesResponse) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

func (x *LiveArticlesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Request for [PinAthletes](paralympics.articles.v1.ArticleManager.PinAthletes)
// This will override an existing pins for an article
type PinAthletesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Article ID to pin athletes too
	ArticleId string `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	// List of athlete id's to pin to the article
	Athletes []string `protobuf:"bytes,2,rep,name=athletes,proto3" json:"athletes,omitempty"`
}

func (x *PinAthletesRequest) Reset() {
	*x = PinAthletesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinAthletesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinAthletesRequest) ProtoMessage() {}

func (x *PinAthletesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinAthletesRequest.ProtoReflect.Descriptor instead.
func (*PinAthletesRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{19}
}

func (x *PinAthletesRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *PinAthletesRequest) GetAthletes() []string {
	if x != nil {
		return x.Athletes
	}
	return nil
}

// Response for [PinAthletes](paralympics.articles.v1.ArticleManager.PinAthletes)
type PinAthletesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PinAthletesResponse) Reset() {
	*x = PinAthletesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinAthletesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinAthletesResponse) ProtoMessage() {}

func (x *PinAthletesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinAthletesResponse.ProtoReflect.Descriptor instead.
func (*PinAthletesResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{20}
}

// Request for [PinnedAthletes](paralympics.articles.v1.ArticleManager.PinnedAthletes)
type PinnedAthletesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Article ID to get pinned athletes for
	ArticleId string `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *PinnedAthletesRequest) Reset() {
	*x = PinnedAthletesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedAthletesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedAthletesRequest) ProtoMessage() {}

func (x *PinnedAthletesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedAthletesRequest.ProtoReflect.Descriptor instead.
func (*PinnedAthletesRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{21}
}

func (x *PinnedAthletesRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

// Request for [TogglePinned](paralympics.articles.v1.ArticleManager.TogglePinned)
type TogglePinnedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Article ID to toggle pinned state
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TogglePinnedRequest) Reset() {
	*x = TogglePinnedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TogglePinnedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TogglePinnedRequest) ProtoMessage() {}

func (x *TogglePinnedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TogglePinnedRequest.ProtoReflect.Descriptor instead.
func (*TogglePinnedRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{22}
}

func (x *TogglePinnedRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [TogglePinned](paralympics.articles.v1.ArticleManager.TogglePinned)
type TogglePinnedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The articles pinned state
	Pinned bool `protobuf:"varint,1,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (x *TogglePinnedResponse) Reset() {
	*x = TogglePinnedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TogglePinnedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TogglePinnedResponse) ProtoMessage() {}

func (x *TogglePinnedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TogglePinnedResponse.ProtoReflect.Descriptor instead.
func (*TogglePinnedResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{23}
}

func (x *TogglePinnedResponse) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

// Request for [Pinned](paralympics.articles.v1.ArticleManager.Pinned)
type PinnedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PinnedRequest) Reset() {
	*x = PinnedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedRequest) ProtoMessage() {}

func (x *PinnedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedRequest.ProtoReflect.Descriptor instead.
func (*PinnedRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{24}
}

// Response for [Pinned](paralympics.articles.v1.ArticleManager.Pinned)
type PinnedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of pinned articles
	Articles []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *PinnedResponse) Reset() {
	*x = PinnedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedResponse) ProtoMessage() {}

func (x *PinnedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedResponse.ProtoReflect.Descriptor instead.
func (*PinnedResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{25}
}

func (x *PinnedResponse) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

// Request for [Restore](paralympics.articles.v1.ArticleManager.Restore)
type RestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the article to restore
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RestoreRequest) Reset() {
	*x = RestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRequest) ProtoMessage() {}

func (x *RestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRequest.ProtoReflect.Descriptor instead.
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{26}
}

func (x *RestoreRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [Restore](paralympics.articles.v1.ArticleManager.Restore)
type RestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The restored article
	Article *Article `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
}

func (x *RestoreResponse) Reset() {
	*x = RestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResponse) ProtoMessage() {}

func (x *RestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResponse.ProtoReflect.Descriptor instead.
func (*RestoreResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{27}
}

func (x *RestoreResponse) GetArticle() *Article {
	if x != nil {
		return x.Article
	}
	return nil
}

// Request for [Purge](paralympics.articles.v1.ArticleManager.Purge)
type PurgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the article to restore
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PurgeRequest) Reset() {
	*x = PurgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRequest) ProtoMessage() {}

func (x *PurgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRequest.ProtoReflect.Descriptor instead.
func (*PurgeRequest) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{28}
}

func (x *PurgeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [Purge](paralympics.articles.v1.ArticleManager.Purge)
type PurgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PurgeResponse) Reset() {
	*x = PurgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articles_v1_article_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeResponse) ProtoMessage() {}

func (x *PurgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articles_v1_article_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeResponse.ProtoReflect.Descriptor instead.
func (*PurgeResponse) Descriptor() ([]byte, []int) {
	return file_articles_v1_article_proto_rawDescGZIP(), []int{29}
}

var File_articles_v1_article_proto protoreflect.FileDescriptor

var file_articles_v1_article_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x06, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x75, 0x72, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x69, 0x6d, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x69,
	0x6d, 0x67, 0x43, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x68, 0x65,
	0x72, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x48, 0x65, 0x72, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x69, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x72, 0x69, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x6c, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x43,
	0x61, 0x72, 0x64, 0x41, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x67, 0x5f, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d,
	0x67, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0x8c, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0,
	0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x3d, 0x0a,
	0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0x24, 0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x14, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x22, 0x36, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x15, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x53, 0x6c, 0x75, 0x67, 0x22, 0x26, 0x0a, 0x14, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a,
	0x15, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x22, 0x6a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x7a, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x0f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x3b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x27, 0x0a, 0x15,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x16, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x17, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x93, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x6a, 0x0a, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4f,
	0x0a, 0x12, 0x50, 0x69, 0x6e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x22,
	0x15, 0x0a, 0x13, 0x50, 0x69, 0x6e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x15, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x25,
	0x0a, 0x13, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x0e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x7d, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x06, 0x2a, 0x33, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x49, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x21, 0x0a, 0x0d,
	0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x43, 0x10, 0x01, 0x2a,
	0xa8, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x6c, 0x75, 0x72, 0x62, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x46,
	0x72, 0x6f, 0x6d, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x07, 0x2a, 0x6d, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x55, 0x55, 0x49, 0x44, 0x76, 0x34, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x55, 0x52, 0x49, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x47, 0x54, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x46, 0x72, 0x6f, 0x6d, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04, 0x2a, 0x6b, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x52,
	0x41, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x47,
	0x49, 0x46, 0x54, 0x53, 0x10, 0x04, 0x32, 0xe4, 0x0d, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x0b, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2d, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x6c,
	0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0c,
	0x4c, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0a, 0x50,
	0x75, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x20, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x73, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x2e, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x2d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x05, 0x50, 0x75, 0x72, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6a, 0x0a,
	0x0b, 0x50, 0x69, 0x6e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0e, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x68, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x6d, 0x0a, 0x0c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3c, 0x5a,
	0x3a, 0x67, 0x6f, 0x2e, 0x73, 0x6f, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x62,
	0x70, 0x61, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x3b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_articles_v1_article_proto_rawDescOnce sync.Once
	file_articles_v1_article_proto_rawDescData = file_articles_v1_article_proto_rawDesc
)

func file_articles_v1_article_proto_rawDescGZIP() []byte {
	file_articles_v1_article_proto_rawDescOnce.Do(func() {
		file_articles_v1_article_proto_rawDescData = protoimpl.X.CompressGZIP(file_articles_v1_article_proto_rawDescData)
	})
	return file_articles_v1_article_proto_rawDescData
}

var file_articles_v1_article_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_articles_v1_article_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_articles_v1_article_proto_goTypes = []interface{}{
	(SortField)(0),                  // 0: paralympics.articles.v1.SortField
	(PinnedFilter)(0),               // 1: paralympics.articles.v1.PinnedFilter
	(SortDirection)(0),              // 2: paralympics.articles.v1.SortDirection
	(Field)(0),                      // 3: paralympics.articles.v1.Field
	(ErrorCode)(0),                  // 4: paralympics.articles.v1.ErrorCode
	(Category)(0),                   // 5: paralympics.articles.v1.Category
	(*Article)(nil),                 // 6: paralympics.articles.v1.Article
	(*SortOption)(nil),              // 7: paralympics.articles.v1.SortOption
	(*Filter)(nil),                  // 8: paralympics.articles.v1.Filter
	(*ArticleByIDRequest)(nil),      // 9: paralympics.articles.v1.ArticleByIDRequest
	(*ArticleBySlugRequest)(nil),    // 10: paralympics.articles.v1.ArticleBySlugRequest
	(*Pagination)(nil),              // 11: paralympics.articles.v1.Pagination
	(*ListArticlesRequest)(nil),     // 12: paralympics.articles.v1.ListArticlesRequest
	(*ArticleContentRequest)(nil),   // 13: paralympics.articles.v1.ArticleContentRequest
	(*TogglePublishRequest)(nil),    // 14: paralympics.articles.v1.TogglePublishRequest
	(*TogglePublishResponse)(nil),   // 15: paralympics.articles.v1.TogglePublishResponse
	(*ListArticlesResponse)(nil),    // 16: paralympics.articles.v1.ListArticlesResponse
	(*FieldError)(nil),              // 17: paralympics.articles.v1.FieldError
	(*ValidationError)(nil),         // 18: paralympics.articles.v1.ValidationError
	(*FeatureArticleRequest)(nil),   // 19: paralympics.articles.v1.FeatureArticleRequest
	(*FeatureArticleResponse)(nil),  // 20: paralympics.articles.v1.FeatureArticleResponse
	(*FeaturedArticleRequest)(nil),  // 21: paralympics.articles.v1.FeaturedArticleRequest
	(*FeaturedArticleResponse)(nil), // 22: paralympics.articles.v1.FeaturedArticleResponse
	(*LiveArticlesRequest)(nil),     // 23: paralympics.articles.v1.LiveArticlesRequest
	(*LiveArticlesResponse)(nil),    // 24: paralympics.articles.v1.LiveArticlesResponse
	(*PinAthletesRequest)(nil),      // 25: paralympics.articles.v1.PinAthletesRequest
	(*PinAthletesResponse)(nil),     // 26: paralympics.articles.v1.PinAthletesResponse
	(*PinnedAthletesRequest)(nil),   // 27: paralympics.articles.v1.PinnedAthletesRequest
	(*TogglePinnedRequest)(nil),     // 28: paralympics.articles.v1.TogglePinnedRequest
	(*TogglePinnedResponse)(nil),    // 29: paralympics.articles.v1.TogglePinnedResponse
	(*PinnedRequest)(nil),           // 30: paralympics.articles.v1.PinnedRequest
	(*PinnedResponse)(nil),          // 31: paralympics.articles.v1.PinnedResponse
	(*RestoreRequest)(nil),          // 32: paralympics.articles.v1.RestoreRequest
	(*RestoreResponse)(nil),         // 33: paralympics.articles.v1.RestoreResponse
	(*PurgeRequest)(nil),            // 34: paralympics.articles.v1.PurgeRequest
	(*PurgeResponse)(nil),           // 35: paralympics.articles.v1.PurgeResponse
	(*timestamp.Timestamp)(nil),     // 36: google.protobuf.Timestamp
	(*v1.Image)(nil),                // 37: paralympics.content.v1.Image
	(*v1.ContentModule)(nil),        // 38: paralympics.content.v1.ContentModule
	(*empty.Empty)(nil),             // 39: google.protobuf.Empty
	(*v11.Athlete)(nil),             // 40: paralympics.athletes.v1.Athlete
}
var file_articles_v1_article_proto_depIdxs = []int32{
	36, // 0: paralympics.articles.v1.Article.create_date:type_name -> google.protobuf.Timestamp
	36, // 1: paralympics.articles.v1.Article.update_date:type_name -> google.protobuf.Timestamp
	36, // 2: paralympics.articles.v1.Article.delete_date:type_name -> google.protobuf.Timestamp
	36, // 3: paralympics.articles.v1.Article.publish_from:type_name -> google.protobuf.Timestamp
	36, // 4: paralympics.articles.v1.Article.publish_until:type_name -> google.protobuf.Timestamp
	37, // 5: paralympics.articles.v1.Article.img_card:type_name -> paralympics.content.v1.Image
	37, // 6: paralympics.articles.v1.Article.img_hero:type_name -> paralympics.content.v1.Image
	5,  // 7: paralympics.articles.v1.Article.category:type_name -> paralympics.articles.v1.Category
	0,  // 8: paralympics.articles.v1.SortOption.field:type_name -> paralympics.articles.v1.SortField
	2,  // 9: paralympics.articles.v1.SortOption.direction:type_name -> paralympics.articles.v1.SortDirection
	1,  // 10: paralympics.articles.v1.Filter.pinned:type_name -> paralympics.articles.v1.PinnedFilter
	5,  // 11: paralympics.articles.v1.Filter.category:type_name -> paralympics.articles.v1.Category
	11, // 12: paralympics.articles.v1.ListArticlesRequest.pagination:type_name -> paralympics.articles.v1.Pagination
	7,  // 13: paralympics.articles.v1.ListArticlesRequest.sort:type_name -> paralympics.articles.v1.SortOption
	8,  // 14: paralympics.articles.v1.ListArticlesRequest.filter:type_name -> paralympics.articles.v1.Filter
	6,  // 15: paralympics.articles.v1.ListArticlesResponse.articles:type_name -> paralympics.articles.v1.Article
	3,  // 16: paralympics.articles.v1.FieldError.field:type_name -> paralympics.articles.v1.Field
	4,  // 17: paralympics.articles.v1.FieldError.code:type_name -> paralympics.articles.v1.ErrorCode
	17, // 18: paralympics.articles.v1.ValidationError.errors:type_name -> paralympics.articles.v1.FieldError
	6,  // 19: paralympics.articles.v1.FeaturedArticleResponse.article:type_name -> paralympics.articles.v1.Article
	11, // 20: paralympics.articles.v1.LiveArticlesRequest.pagination:type_name -> paralympics.articles.v1.Pagination
	8,  // 21: paralympics.articles.v1.LiveArticlesRequest.filter:type_name -> paralympics.articles.v1.Filter
	6,  // 22: paralympics.articles.v1.LiveArticlesResponse.articles:type_name -> paralympics.articles.v1.Article
	6,  // 23: paralympics.articles.v1.PinnedResponse.articles:type_name -> paralympics.articles.v1.Article
	6,  // 24: paralympics.articles.v1.RestoreResponse.article:type_name -> paralympics.articles.v1.Article
	9,  // 25: paralympics.articles.v1.ArticleManager.ArticleByID:input_type -> paralympics.articles.v1.ArticleByIDRequest
	10, // 26: paralympics.articles.v1.ArticleManager.ArticleBySlug:input_type -> paralympics.articles.v1.ArticleBySlugRequest
	12, // 27: paralympics.articles.v1.ArticleManager.ListArticles:input_type -> paralympics.articles.v1.ListArticlesRequest
	23, // 28: paralympics.articles.v1.ArticleManager.LiveArticles:input_type -> paralympics.articles.v1.LiveArticlesRequest
	6,  // 29: paralympics.articles.v1.ArticleManager.PutArticle:input_type -> paralympics.articles.v1.Article
	19, // 30: paralympics.articles.v1.ArticleManager.FeatureArticle:input_type -> paralympics.articles.v1.FeatureArticleRequest
	21, // 31: paralympics.articles.v1.ArticleManager.FeaturedArticle:input_type -> paralympics.articles.v1.FeaturedArticleRequest
	14, // 32: paralympics.articles.v1.ArticleManager.TogglePublished:input_type -> paralympics.articles.v1.TogglePublishRequest
	6,  // 33: paralympics.articles.v1.ArticleManager.DeleteArticle:input_type -> paralympics.articles.v1.Article
	32, // 34: paralympics.articles.v1.ArticleManager.Restore:input_type -> paralympics.articles.v1.RestoreRequest
	34, // 35: paralympics.articles.v1.ArticleManager.Purge:input_type -> paralympics.articles.v1.PurgeRequest
	13, // 36: paralympics.articles.v1.ArticleManager.ArticleContent:input_type -> paralympics.articles.v1.ArticleContentRequest
	38, // 37: paralympics.articles.v1.ArticleManager.PutArticleContent:input_type -> paralympics.content.v1.ContentModule
	25, // 38: paralympics.articles.v1.ArticleManager.PinAthletes:input_type -> paralympics.articles.v1.PinAthletesRequest
	27, // 39: paralympics.articles.v1.ArticleManager.PinnedAthletes:input_type -> paralympics.articles.v1.PinnedAthletesRequest
	28, // 40: paralympics.articles.v1.ArticleManager.TogglePinned:input_type -> paralympics.articles.v1.TogglePinnedRequest
	30, // 41: paralympics.articles.v1.ArticleManager.Pinned:input_type -> paralympics.articles.v1.PinnedRequest
	6,  // 42: paralympics.articles.v1.ArticleManager.ArticleByID:output_type -> paralympics.articles.v1.Article
	6,  // 43: paralympics.articles.v1.ArticleManager.ArticleBySlug:output_type -> paralympics.articles.v1.Article
	16, // 44: paralympics.articles.v1.ArticleManager.ListArticles:output_type -> paralympics.articles.v1.ListArticlesResponse
	24, // 45: paralympics.articles.v1.ArticleManager.LiveArticles:output_type -> paralympics.articles.v1.LiveArticlesResponse
	6,  // 46: paralympics.articles.v1.ArticleManager.PutArticle:output_type -> paralympics.articles.v1.Article
	20, // 47: paralympics.articles.v1.ArticleManager.FeatureArticle:output_type -> paralympics.articles.v1.FeatureArticleResponse
	22, // 48: paralympics.articles.v1.ArticleManager.FeaturedArticle:output_type -> paralympics.articles.v1.FeaturedArticleResponse
	15, // 49: paralympics.articles.v1.ArticleManager.TogglePublished:output_type -> paralympics.articles.v1.TogglePublishResponse
	39, // 50: paralympics.articles.v1.ArticleManager.DeleteArticle:output_type -> google.protobuf.Empty
	33, // 51: paralympics.articles.v1.ArticleManager.Restore:output_type -> paralympics.articles.v1.RestoreResponse
	35, // 52: paralympics.articles.v1.ArticleManager.Purge:output_type -> paralympics.articles.v1.PurgeResponse
	38, // 53: paralympics.articles.v1.ArticleManager.ArticleContent:output_type -> paralympics.content.v1.ContentModule
	38, // 54: paralympics.articles.v1.ArticleManager.PutArticleContent:output_type -> paralympics.content.v1.ContentModule
	26, // 55: paralympics.articles.v1.ArticleManager.PinAthletes:output_type -> paralympics.articles.v1.PinAthletesResponse
	40, // 56: paralympics.articles.v1.ArticleManager.PinnedAthletes:output_type -> paralympics.athletes.v1.Athlete
	29, // 57: paralympics.articles.v1.ArticleManager.TogglePinned:output_type -> paralympics.articles.v1.TogglePinnedResponse
	31, // 58: paralympics.articles.v1.ArticleManager.Pinned:output_type -> paralympics.articles.v1.PinnedResponse
	42, // [42:59] is the sub-list for method output_type
	25, // [25:42] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_articles_v1_article_proto_init() }
func file_articles_v1_article_proto_init() {
	if File_articles_v1_article_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_articles_v1_article_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleBySlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TogglePublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TogglePublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturedArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturedArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveArticlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveArticlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinAthletesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinAthletesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedAthletesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TogglePinnedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TogglePinnedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articles_v1_article_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_articles_v1_article_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_articles_v1_article_proto_goTypes,
		DependencyIndexes: file_articles_v1_article_proto_depIdxs,
		EnumInfos:         file_articles_v1_article_proto_enumTypes,
		MessageInfos:      file_articles_v1_article_proto_msgTypes,
	}.Build()
	File_articles_v1_article_proto = out.File
	file_articles_v1_article_proto_rawDesc = nil
	file_articles_v1_article_proto_goTypes = nil
	file_articles_v1_article_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ArticleManagerClient is the client API for ArticleManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArticleManagerClient interface {
	// Get an article by it's unique by UUID
	ArticleByID(ctx context.Context, in *ArticleByIDRequest, opts ...grpc.CallOption) (*Article, error)
	// Get an article by it's unique slug
	ArticleBySlug(ctx context.Context, in *ArticleBySlugRequest, opts ...grpc.CallOption) (*Article, error)
	// Lists all the Articles
	ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ListArticlesResponse, error)
	// LiveArticles returns a paginated list of all the currently live articls
	LiveArticles(ctx context.Context, in *LiveArticlesRequest, opts ...grpc.CallOption) (*LiveArticlesResponse, error)
	// Creates or Updates an article
	PutArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	// Feature an article
	FeatureArticle(ctx context.Context, in *FeatureArticleRequest, opts ...grpc.CallOption) (*FeatureArticleResponse, error)
	// Returns the featured article
	FeaturedArticle(ctx context.Context, in *FeaturedArticleRequest, opts ...grpc.CallOption) (*FeaturedArticleResponse, error)
	// TogglePublished toggles the publication state of an article
	TogglePublished(ctx context.Context, in *TogglePublishRequest, opts ...grpc.CallOption) (*TogglePublishResponse, error)
	// Deletes an article
	DeleteArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore an article that is soft deleted
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
	// Purge hard deletes an article and relations
	Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error)
	// List article content
	ArticleContent(ctx context.Context, in *ArticleContentRequest, opts ...grpc.CallOption) (ArticleManager_ArticleContentClient, error)
	// Creates or Updates article content
	PutArticleContent(ctx context.Context, opts ...grpc.CallOption) (ArticleManager_PutArticleContentClient, error)
	// PinAthletes pins athletes to an article
	PinAthletes(ctx context.Context, in *PinAthletesRequest, opts ...grpc.CallOption) (*PinAthletesResponse, error)
	// PinnedAthletes returns the athletes pinned to an article
	PinnedAthletes(ctx context.Context, in *PinnedAthletesRequest, opts ...grpc.CallOption) (ArticleManager_PinnedAthletesClient, error)
	// TogglePinned toggles an articles pinned state
	TogglePinned(ctx context.Context, in *TogglePinnedRequest, opts ...grpc.CallOption) (*TogglePinnedResponse, error)
	// Pinned is a convenience method for returning pinned articles
	Pinned(ctx context.Context, in *PinnedRequest, opts ...grpc.CallOption) (*PinnedResponse, error)
}

type articleManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleManagerClient(cc grpc.ClientConnInterface) ArticleManagerClient {
	return &articleManagerClient{cc}
}

func (c *articleManagerClient) ArticleByID(ctx context.Context, in *ArticleByIDRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/ArticleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) ArticleBySlug(ctx context.Context, in *ArticleBySlugRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/ArticleBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ListArticlesResponse, error) {
	out := new(ListArticlesResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/ListArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) LiveArticles(ctx context.Context, in *LiveArticlesRequest, opts ...grpc.CallOption) (*LiveArticlesResponse, error) {
	out := new(LiveArticlesResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/LiveArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) PutArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/PutArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) FeatureArticle(ctx context.Context, in *FeatureArticleRequest, opts ...grpc.CallOption) (*FeatureArticleResponse, error) {
	out := new(FeatureArticleResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/FeatureArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) FeaturedArticle(ctx context.Context, in *FeaturedArticleRequest, opts ...grpc.CallOption) (*FeaturedArticleResponse, error) {
	out := new(FeaturedArticleResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/FeaturedArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) TogglePublished(ctx context.Context, in *TogglePublishRequest, opts ...grpc.CallOption) (*TogglePublishResponse, error) {
	out := new(TogglePublishResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/TogglePublished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) DeleteArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	out := new(RestoreResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error) {
	out := new(PurgeResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) ArticleContent(ctx context.Context, in *ArticleContentRequest, opts ...grpc.CallOption) (ArticleManager_ArticleContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ArticleManager_serviceDesc.Streams[0], "/paralympics.articles.v1.ArticleManager/ArticleContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &articleManagerArticleContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArticleManager_ArticleContentClient interface {
	Recv() (*v1.ContentModule, error)
	grpc.ClientStream
}

type articleManagerArticleContentClient struct {
	grpc.ClientStream
}

func (x *articleManagerArticleContentClient) Recv() (*v1.ContentModule, error) {
	m := new(v1.ContentModule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *articleManagerClient) PutArticleContent(ctx context.Context, opts ...grpc.CallOption) (ArticleManager_PutArticleContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ArticleManager_serviceDesc.Streams[1], "/paralympics.articles.v1.ArticleManager/PutArticleContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &articleManagerPutArticleContentClient{stream}
	return x, nil
}

type ArticleManager_PutArticleContentClient interface {
	Send(*v1.ContentModule) error
	Recv() (*v1.ContentModule, error)
	grpc.ClientStream
}

type articleManagerPutArticleContentClient struct {
	grpc.ClientStream
}

func (x *articleManagerPutArticleContentClient) Send(m *v1.ContentModule) error {
	return x.ClientStream.SendMsg(m)
}

func (x *articleManagerPutArticleContentClient) Recv() (*v1.ContentModule, error) {
	m := new(v1.ContentModule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *articleManagerClient) PinAthletes(ctx context.Context, in *PinAthletesRequest, opts ...grpc.CallOption) (*PinAthletesResponse, error) {
	out := new(PinAthletesResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/PinAthletes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) PinnedAthletes(ctx context.Context, in *PinnedAthletesRequest, opts ...grpc.CallOption) (ArticleManager_PinnedAthletesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ArticleManager_serviceDesc.Streams[2], "/paralympics.articles.v1.ArticleManager/PinnedAthletes", opts...)
	if err != nil {
		return nil, err
	}
	x := &articleManagerPinnedAthletesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArticleManager_PinnedAthletesClient interface {
	Recv() (*v11.Athlete, error)
	grpc.ClientStream
}

type articleManagerPinnedAthletesClient struct {
	grpc.ClientStream
}

func (x *articleManagerPinnedAthletesClient) Recv() (*v11.Athlete, error) {
	m := new(v11.Athlete)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *articleManagerClient) TogglePinned(ctx context.Context, in *TogglePinnedRequest, opts ...grpc.CallOption) (*TogglePinnedResponse, error) {
	out := new(TogglePinnedResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/TogglePinned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleManagerClient) Pinned(ctx context.Context, in *PinnedRequest, opts ...grpc.CallOption) (*PinnedResponse, error) {
	out := new(PinnedResponse)
	err := c.cc.Invoke(ctx, "/paralympics.articles.v1.ArticleManager/Pinned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleManagerServer is the server API for ArticleManager service.
type ArticleManagerServer interface {
	// Get an article by it's unique by UUID
	ArticleByID(context.Context, *ArticleByIDRequest) (*Article, error)
	// Get an article by it's unique slug
	ArticleBySlug(context.Context, *ArticleBySlugRequest) (*Article, error)
	// Lists all the Articles
	ListArticles(context.Context, *ListArticlesRequest) (*ListArticlesResponse, error)
	// LiveArticles returns a paginated list of all the currently live articls
	LiveArticles(context.Context, *LiveArticlesRequest) (*LiveArticlesResponse, error)
	// Creates or Updates an article
	PutArticle(context.Context, *Article) (*Article, error)
	// Feature an article
	FeatureArticle(context.Context, *FeatureArticleRequest) (*FeatureArticleResponse, error)
	// Returns the featured article
	FeaturedArticle(context.Context, *FeaturedArticleRequest) (*FeaturedArticleResponse, error)
	// TogglePublished toggles the publication state of an article
	TogglePublished(context.Context, *TogglePublishRequest) (*TogglePublishResponse, error)
	// Deletes an article
	DeleteArticle(context.Context, *Article) (*empty.Empty, error)
	// Restore an article that is soft deleted
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	// Purge hard deletes an article and relations
	Purge(context.Context, *PurgeRequest) (*PurgeResponse, error)
	// List article content
	ArticleContent(*ArticleContentRequest, ArticleManager_ArticleContentServer) error
	// Creates or Updates article content
	PutArticleContent(ArticleManager_PutArticleContentServer) error
	// PinAthletes pins athletes to an article
	PinAthletes(context.Context, *PinAthletesRequest) (*PinAthletesResponse, error)
	// PinnedAthletes returns the athletes pinned to an article
	PinnedAthletes(*PinnedAthletesRequest, ArticleManager_PinnedAthletesServer) error
	// TogglePinned toggles an articles pinned state
	TogglePinned(context.Context, *TogglePinnedRequest) (*TogglePinnedResponse, error)
	// Pinned is a convenience method for returning pinned articles
	Pinned(context.Context, *PinnedRequest) (*PinnedResponse, error)
}

// UnimplementedArticleManagerServer can be embedded to have forward compatible implementations.
type UnimplementedArticleManagerServer struct {
}

func (*UnimplementedArticleManagerServer) ArticleByID(context.Context, *ArticleByIDRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleByID not implemented")
}
func (*UnimplementedArticleManagerServer) ArticleBySlug(context.Context, *ArticleBySlugRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleBySlug not implemented")
}
func (*UnimplementedArticleManagerServer) ListArticles(context.Context, *ListArticlesRequest) (*ListArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (*UnimplementedArticleManagerServer) LiveArticles(context.Context, *LiveArticlesRequest) (*LiveArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveArticles not implemented")
}
func (*UnimplementedArticleManagerServer) PutArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutArticle not implemented")
}
func (*UnimplementedArticleManagerServer) FeatureArticle(context.Context, *FeatureArticleRequest) (*FeatureArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeatureArticle not implemented")
}
func (*UnimplementedArticleManagerServer) FeaturedArticle(context.Context, *FeaturedArticleRequest) (*FeaturedArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeaturedArticle not implemented")
}
func (*UnimplementedArticleManagerServer) TogglePublished(context.Context, *TogglePublishRequest) (*TogglePublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TogglePublished not implemented")
}
func (*UnimplementedArticleManagerServer) DeleteArticle(context.Context, *Article) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (*UnimplementedArticleManagerServer) Restore(context.Context, *RestoreRequest) (*RestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedArticleManagerServer) Purge(context.Context, *PurgeRequest) (*PurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (*UnimplementedArticleManagerServer) ArticleContent(*ArticleContentRequest, ArticleManager_ArticleContentServer) error {
	return status.Errorf(codes.Unimplemented, "method ArticleContent not implemented")
}
func (*UnimplementedArticleManagerServer) PutArticleContent(ArticleManager_PutArticleContentServer) error {
	return status.Errorf(codes.Unimplemented, "method PutArticleContent not implemented")
}
func (*UnimplementedArticleManagerServer) PinAthletes(context.Context, *PinAthletesRequest) (*PinAthletesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinAthletes not implemented")
}
func (*UnimplementedArticleManagerServer) PinnedAthletes(*PinnedAthletesRequest, ArticleManager_PinnedAthletesServer) error {
	return status.Errorf(codes.Unimplemented, "method PinnedAthletes not implemented")
}
func (*UnimplementedArticleManagerServer) TogglePinned(context.Context, *TogglePinnedRequest) (*TogglePinnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TogglePinned not implemented")
}
func (*UnimplementedArticleManagerServer) Pinned(context.Context, *PinnedRequest) (*PinnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pinned not implemented")
}

func RegisterArticleManagerServer(s *grpc.Server, srv ArticleManagerServer) {
	s.RegisterService(&_ArticleManager_serviceDesc, srv)
}

func _ArticleManager_ArticleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).ArticleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/ArticleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).ArticleByID(ctx, req.(*ArticleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_ArticleBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).ArticleBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/ArticleBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).ArticleBySlug(ctx, req.(*ArticleBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/ListArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).ListArticles(ctx, req.(*ListArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_LiveArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).LiveArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/LiveArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).LiveArticles(ctx, req.(*LiveArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_PutArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).PutArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/PutArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).PutArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_FeatureArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).FeatureArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/FeatureArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).FeatureArticle(ctx, req.(*FeatureArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_FeaturedArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturedArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).FeaturedArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/FeaturedArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).FeaturedArticle(ctx, req.(*FeaturedArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_TogglePublished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TogglePublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).TogglePublished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/TogglePublished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).TogglePublished(ctx, req.(*TogglePublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).DeleteArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).Purge(ctx, req.(*PurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_ArticleContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArticleContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArticleManagerServer).ArticleContent(m, &articleManagerArticleContentServer{stream})
}

type ArticleManager_ArticleContentServer interface {
	Send(*v1.ContentModule) error
	grpc.ServerStream
}

type articleManagerArticleContentServer struct {
	grpc.ServerStream
}

func (x *articleManagerArticleContentServer) Send(m *v1.ContentModule) error {
	return x.ServerStream.SendMsg(m)
}

func _ArticleManager_PutArticleContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArticleManagerServer).PutArticleContent(&articleManagerPutArticleContentServer{stream})
}

type ArticleManager_PutArticleContentServer interface {
	Send(*v1.ContentModule) error
	Recv() (*v1.ContentModule, error)
	grpc.ServerStream
}

type articleManagerPutArticleContentServer struct {
	grpc.ServerStream
}

func (x *articleManagerPutArticleContentServer) Send(m *v1.ContentModule) error {
	return x.ServerStream.SendMsg(m)
}

func (x *articleManagerPutArticleContentServer) Recv() (*v1.ContentModule, error) {
	m := new(v1.ContentModule)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ArticleManager_PinAthletes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinAthletesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).PinAthletes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/PinAthletes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).PinAthletes(ctx, req.(*PinAthletesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_PinnedAthletes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PinnedAthletesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArticleManagerServer).PinnedAthletes(m, &articleManagerPinnedAthletesServer{stream})
}

type ArticleManager_PinnedAthletesServer interface {
	Send(*v11.Athlete) error
	grpc.ServerStream
}

type articleManagerPinnedAthletesServer struct {
	grpc.ServerStream
}

func (x *articleManagerPinnedAthletesServer) Send(m *v11.Athlete) error {
	return x.ServerStream.SendMsg(m)
}

func _ArticleManager_TogglePinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TogglePinnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).TogglePinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/TogglePinned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).TogglePinned(ctx, req.(*TogglePinnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleManager_Pinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleManagerServer).Pinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.articles.v1.ArticleManager/Pinned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleManagerServer).Pinned(ctx, req.(*PinnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArticleManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paralympics.articles.v1.ArticleManager",
	HandlerType: (*ArticleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ArticleByID",
			Handler:    _ArticleManager_ArticleByID_Handler,
		},
		{
			MethodName: "ArticleBySlug",
			Handler:    _ArticleManager_ArticleBySlug_Handler,
		},
		{
			MethodName: "ListArticles",
			Handler:    _ArticleManager_ListArticles_Handler,
		},
		{
			MethodName: "LiveArticles",
			Handler:    _ArticleManager_LiveArticles_Handler,
		},
		{
			MethodName: "PutArticle",
			Handler:    _ArticleManager_PutArticle_Handler,
		},
		{
			MethodName: "FeatureArticle",
			Handler:    _ArticleManager_FeatureArticle_Handler,
		},
		{
			MethodName: "FeaturedArticle",
			Handler:    _ArticleManager_FeaturedArticle_Handler,
		},
		{
			MethodName: "TogglePublished",
			Handler:    _ArticleManager_TogglePublished_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleManager_DeleteArticle_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _ArticleManager_Restore_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _ArticleManager_Purge_Handler,
		},
		{
			MethodName: "PinAthletes",
			Handler:    _ArticleManager_PinAthletes_Handler,
		},
		{
			MethodName: "TogglePinned",
			Handler:    _ArticleManager_TogglePinned_Handler,
		},
		{
			MethodName: "Pinned",
			Handler:    _ArticleManager_Pinned_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArticleContent",
			Handler:       _ArticleManager_ArticleContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutArticleContent",
			Handler:       _ArticleManager_PutArticleContent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PinnedAthletes",
			Handler:       _ArticleManager_PinnedAthletes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "articles/v1/article.proto",
}
