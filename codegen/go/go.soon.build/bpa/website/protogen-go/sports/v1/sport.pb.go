// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: sports/v1/sport.proto

package sports

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v11 "go.soon.build/bpa/website/protogen-go/content/social/v1"
	v1 "go.soon.build/bpa/website/protogen-go/content/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Seasons a sport can be in
type Season int32

const (
	Season_NONE   Season = 0
	Season_WINTER Season = 1
	Season_SUMMER Season = 2
)

// Enum value maps for Season.
var (
	Season_name = map[int32]string{
		0: "NONE",
		1: "WINTER",
		2: "SUMMER",
	}
	Season_value = map[string]int32{
		"NONE":   0,
		"WINTER": 1,
		"SUMMER": 2,
	}
)

func (x Season) Enum() *Season {
	p := new(Season)
	*p = x
	return p
}

func (x Season) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Season) Descriptor() protoreflect.EnumDescriptor {
	return file_sports_v1_sport_proto_enumTypes[0].Descriptor()
}

func (Season) Type() protoreflect.EnumType {
	return &file_sports_v1_sport_proto_enumTypes[0]
}

func (x Season) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Season.Descriptor instead.
func (Season) EnumDescriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{0}
}

// Fields we can sort Sports by
type SortField int32

const (
	SortField_CREATE_DATE SortField = 0
	SortField_UPDATE_DATE SortField = 1
	SortField_DELETE_DATE SortField = 2
	SortField_NAME        SortField = 3
)

// Enum value maps for SortField.
var (
	SortField_name = map[int32]string{
		0: "CREATE_DATE",
		1: "UPDATE_DATE",
		2: "DELETE_DATE",
		3: "NAME",
	}
	SortField_value = map[string]int32{
		"CREATE_DATE": 0,
		"UPDATE_DATE": 1,
		"DELETE_DATE": 2,
		"NAME":        3,
	}
)

func (x SortField) Enum() *SortField {
	p := new(SortField)
	*p = x
	return p
}

func (x SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_sports_v1_sport_proto_enumTypes[1].Descriptor()
}

func (SortField) Type() protoreflect.EnumType {
	return &file_sports_v1_sport_proto_enumTypes[1]
}

func (x SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortField.Descriptor instead.
func (SortField) EnumDescriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{1}
}

// FeaturedFilter - it's not a binary choice XD
type FeaturedFilter int32

const (
	FeaturedFilter_Either      FeaturedFilter = 0
	FeaturedFilter_Featured    FeaturedFilter = 1
	FeaturedFilter_NotFeatured FeaturedFilter = 2
)

// Enum value maps for FeaturedFilter.
var (
	FeaturedFilter_name = map[int32]string{
		0: "Either",
		1: "Featured",
		2: "NotFeatured",
	}
	FeaturedFilter_value = map[string]int32{
		"Either":      0,
		"Featured":    1,
		"NotFeatured": 2,
	}
)

func (x FeaturedFilter) Enum() *FeaturedFilter {
	p := new(FeaturedFilter)
	*p = x
	return p
}

func (x FeaturedFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeaturedFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_sports_v1_sport_proto_enumTypes[2].Descriptor()
}

func (FeaturedFilter) Type() protoreflect.EnumType {
	return &file_sports_v1_sport_proto_enumTypes[2]
}

func (x FeaturedFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeaturedFilter.Descriptor instead.
func (FeaturedFilter) EnumDescriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{2}
}

// The type of sort to apply, ascending or descending
type SortDirection int32

const (
	SortDirection_ASC SortDirection = 0
	SortDirection_DSC SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "ASC",
		1: "DSC",
	}
	SortDirection_value = map[string]int32{
		"ASC": 0,
		"DSC": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_sports_v1_sport_proto_enumTypes[3].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_sports_v1_sport_proto_enumTypes[3]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{3}
}

// Field mapping used in validation errors
type Field int32

const (
	Field_SportId      Field = 0
	Field_SportSlug    Field = 1
	Field_SportName    Field = 2
	Field_SportSeason  Field = 3
	Field_SportIcon    Field = 4
	Field_SportImgCard Field = 5
	Field_SportImgHero Field = 6
	Field_SportLead    Field = 7
	Field_SportBody    Field = 8
)

// Enum value maps for Field.
var (
	Field_name = map[int32]string{
		0: "SportId",
		1: "SportSlug",
		2: "SportName",
		3: "SportSeason",
		4: "SportIcon",
		5: "SportImgCard",
		6: "SportImgHero",
		7: "SportLead",
		8: "SportBody",
	}
	Field_value = map[string]int32{
		"SportId":      0,
		"SportSlug":    1,
		"SportName":    2,
		"SportSeason":  3,
		"SportIcon":    4,
		"SportImgCard": 5,
		"SportImgHero": 6,
		"SportLead":    7,
		"SportBody":    8,
	}
)

func (x Field) Enum() *Field {
	p := new(Field)
	*p = x
	return p
}

func (x Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field) Descriptor() protoreflect.EnumDescriptor {
	return file_sports_v1_sport_proto_enumTypes[4].Descriptor()
}

func (Field) Type() protoreflect.EnumType {
	return &file_sports_v1_sport_proto_enumTypes[4]
}

func (x Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field.Descriptor instead.
func (Field) EnumDescriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{4}
}

// Error Codes returned as part of validation errors
type ErrorCode int32

const (
	// Generic error codes
	ErrorCode_Required      ErrorCode = 0
	ErrorCode_InvalidUUIDv4 ErrorCode = 1
	ErrorCode_InvalidURI    ErrorCode = 2
	// Image error codes
	ErrorCode_ImageInvalid ErrorCode = 3
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "Required",
		1: "InvalidUUIDv4",
		2: "InvalidURI",
		3: "ImageInvalid",
	}
	ErrorCode_value = map[string]int32{
		"Required":      0,
		"InvalidUUIDv4": 1,
		"InvalidURI":    2,
		"ImageInvalid":  3,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_sports_v1_sport_proto_enumTypes[5].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_sports_v1_sport_proto_enumTypes[5]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{5}
}

// A Sport stored in the content service
type Sport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug           string               `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	CreateDate     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	UpdateDate     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	DeleteDate     *timestamp.Timestamp `protobuf:"bytes,5,opt,name=delete_date,json=deleteDate,proto3" json:"delete_date,omitempty"`
	Name           string               `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Season         Season               `protobuf:"varint,7,opt,name=season,proto3,enum=paralympics.sports.v1.Season" json:"season,omitempty"`
	Icon           string               `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	ImgCard        *v1.Image            `protobuf:"bytes,9,opt,name=img_card,json=imgCard,proto3" json:"img_card,omitempty"`
	ImgHero        *v1.Image            `protobuf:"bytes,10,opt,name=img_hero,json=imgHero,proto3" json:"img_hero,omitempty"`
	Featured       bool                 `protobuf:"varint,11,opt,name=featured,proto3" json:"featured,omitempty"`
	ExtLink        *ExtLink             `protobuf:"bytes,12,opt,name=ext_link,json=extLink,proto3" json:"ext_link,omitempty"`
	SocialProfiles []*v11.SocialProfile `protobuf:"bytes,13,rep,name=social_profiles,json=socialProfiles,proto3" json:"social_profiles,omitempty"`
	ImgCardAlt     string               `protobuf:"bytes,14,opt,name=img_card_alt,json=imgCardAlt,proto3" json:"img_card_alt,omitempty"`
	ImgHeroAlt     string               `protobuf:"bytes,15,opt,name=img_hero_alt,json=imgHeroAlt,proto3" json:"img_hero_alt,omitempty"`
	Lead           string               `protobuf:"bytes,16,opt,name=lead,proto3" json:"lead,omitempty"`
	Body           string               `protobuf:"bytes,17,opt,name=body,proto3" json:"body,omitempty"`
	BodyHtml       string               `protobuf:"bytes,18,opt,name=body_html,json=bodyHtml,proto3" json:"body_html,omitempty"`
}

func (x *Sport) Reset() {
	*x = Sport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sport) ProtoMessage() {}

func (x *Sport) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sport.ProtoReflect.Descriptor instead.
func (*Sport) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{0}
}

func (x *Sport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sport) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Sport) GetCreateDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *Sport) GetUpdateDate() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *Sport) GetDeleteDate() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteDate
	}
	return nil
}

func (x *Sport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sport) GetSeason() Season {
	if x != nil {
		return x.Season
	}
	return Season_NONE
}

func (x *Sport) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Sport) GetImgCard() *v1.Image {
	if x != nil {
		return x.ImgCard
	}
	return nil
}

func (x *Sport) GetImgHero() *v1.Image {
	if x != nil {
		return x.ImgHero
	}
	return nil
}

func (x *Sport) GetFeatured() bool {
	if x != nil {
		return x.Featured
	}
	return false
}

func (x *Sport) GetExtLink() *ExtLink {
	if x != nil {
		return x.ExtLink
	}
	return nil
}

func (x *Sport) GetSocialProfiles() []*v11.SocialProfile {
	if x != nil {
		return x.SocialProfiles
	}
	return nil
}

func (x *Sport) GetImgCardAlt() string {
	if x != nil {
		return x.ImgCardAlt
	}
	return ""
}

func (x *Sport) GetImgHeroAlt() string {
	if x != nil {
		return x.ImgHeroAlt
	}
	return ""
}

func (x *Sport) GetLead() string {
	if x != nil {
		return x.Lead
	}
	return ""
}

func (x *Sport) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Sport) GetBodyHtml() string {
	if x != nil {
		return x.BodyHtml
	}
	return ""
}

// An external site link
type ExtLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ExtLink) Reset() {
	*x = ExtLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtLink) ProtoMessage() {}

func (x *ExtLink) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtLink.ProtoReflect.Descriptor instead.
func (*ExtLink) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{1}
}

func (x *ExtLink) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ExtLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Sort field + sort direction
type SortOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     SortField     `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.sports.v1.SortField" json:"field,omitempty"`
	Direction SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=paralympics.sports.v1.SortDirection" json:"direction,omitempty"`
}

func (x *SortOption) Reset() {
	*x = SortOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOption) ProtoMessage() {}

func (x *SortOption) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOption.ProtoReflect.Descriptor instead.
func (*SortOption) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{2}
}

func (x *SortOption) GetField() SortField {
	if x != nil {
		return x.Field
	}
	return SortField_CREATE_DATE
}

func (x *SortOption) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_ASC
}

// Fields we can filter sports by
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted  bool           `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`                                             // Search by deleted state
	Season   Season         `protobuf:"varint,2,opt,name=season,proto3,enum=paralympics.sports.v1.Season" json:"season,omitempty"`             // Search by sport season
	GameId   string         `protobuf:"bytes,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                  // Search by related game
	Featured FeaturedFilter `protobuf:"varint,4,opt,name=featured,proto3,enum=paralympics.sports.v1.FeaturedFilter" json:"featured,omitempty"` // Filter by featured flag
	Name     string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                                    // Name filter - not a fuzzy search - exact match
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{3}
}

func (x *Filter) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Filter) GetSeason() Season {
	if x != nil {
		return x.Season
	}
	return Season_NONE
}

func (x *Filter) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *Filter) GetFeatured() FeaturedFilter {
	if x != nil {
		return x.Featured
	}
	return FeaturedFilter_Either
}

func (x *Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for the `SportByID` method
type SportByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SportByIDRequest) Reset() {
	*x = SportByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportByIDRequest) ProtoMessage() {}

func (x *SportByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportByIDRequest.ProtoReflect.Descriptor instead.
func (*SportByIDRequest) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{4}
}

func (x *SportByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request for the `SportBySlug` method
type SportBySlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *SportBySlugRequest) Reset() {
	*x = SportBySlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportBySlugRequest) ProtoMessage() {}

func (x *SportBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportBySlugRequest.ProtoReflect.Descriptor instead.
func (*SportBySlugRequest) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{5}
}

func (x *SportBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

// Pagination
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{6}
}

func (x *Pagination) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Get paginaged list of Sports
type ListSportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination   `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"` // Paginated response
	Sort       []*SortOption `protobuf:"bytes,2,rep,name=sort,proto3" json:"sort,omitempty"`             // Sort response
	Filter     *Filter       `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`         // Filter Sports
}

func (x *ListSportsRequest) Reset() {
	*x = ListSportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSportsRequest) ProtoMessage() {}

func (x *ListSportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSportsRequest.ProtoReflect.Descriptor instead.
func (*ListSportsRequest) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{7}
}

func (x *ListSportsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListSportsRequest) GetSort() []*SortOption {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListSportsRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Request for getting content by Sport ID which is a UUID v4
type SportContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId   string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	SportSlug string `protobuf:"bytes,2,opt,name=sport_slug,json=sportSlug,proto3" json:"sport_slug,omitempty"`
}

func (x *SportContentRequest) Reset() {
	*x = SportContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportContentRequest) ProtoMessage() {}

func (x *SportContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportContentRequest.ProtoReflect.Descriptor instead.
func (*SportContentRequest) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{8}
}

func (x *SportContentRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *SportContentRequest) GetSportSlug() string {
	if x != nil {
		return x.SportSlug
	}
	return ""
}

// Response for ListSports
type ListSportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sports []*Sport `protobuf:"bytes,1,rep,name=sports,proto3" json:"sports,omitempty"`
	Total  int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // Total number of sports that match the search
}

func (x *ListSportsResponse) Reset() {
	*x = ListSportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSportsResponse) ProtoMessage() {}

func (x *ListSportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSportsResponse.ProtoReflect.Descriptor instead.
func (*ListSportsResponse) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{9}
}

func (x *ListSportsResponse) GetSports() []*Sport {
	if x != nil {
		return x.Sports
	}
	return nil
}

func (x *ListSportsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Field Validation Error
type FieldError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field the error occured on
	Field Field `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.sports.v1.Field" json:"field,omitempty"`
	// Error that occured
	Code ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=paralympics.sports.v1.ErrorCode" json:"code,omitempty"`
}

func (x *FieldError) Reset() {
	*x = FieldError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldError) ProtoMessage() {}

func (x *FieldError) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldError.ProtoReflect.Descriptor instead.
func (*FieldError) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{10}
}

func (x *FieldError) GetField() Field {
	if x != nil {
		return x.Field
	}
	return Field_SportId
}

func (x *FieldError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_Required
}

// Validation error response messages
type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Validation errors that occured
	Errors []*FieldError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{11}
}

func (x *ValidationError) GetErrors() []*FieldError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Request for [ToggleFeatured](paralympics.games.v1.SportManager.ToggleFeatured)
type ToggleFeaturedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the sport to toggle the state for
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ToggleFeaturedRequest) Reset() {
	*x = ToggleFeaturedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleFeaturedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleFeaturedRequest) ProtoMessage() {}

func (x *ToggleFeaturedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleFeaturedRequest.ProtoReflect.Descriptor instead.
func (*ToggleFeaturedRequest) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{12}
}

func (x *ToggleFeaturedRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [ToggleFeatured](paralympics.games.v1.SportManager.ToggleFeatured)
type ToggleFeaturedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The now featured state of the sport
	Featured bool `protobuf:"varint,1,opt,name=featured,proto3" json:"featured,omitempty"`
}

func (x *ToggleFeaturedResponse) Reset() {
	*x = ToggleFeaturedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleFeaturedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleFeaturedResponse) ProtoMessage() {}

func (x *ToggleFeaturedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleFeaturedResponse.ProtoReflect.Descriptor instead.
func (*ToggleFeaturedResponse) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{13}
}

func (x *ToggleFeaturedResponse) GetFeatured() bool {
	if x != nil {
		return x.Featured
	}
	return false
}

// Request for [Featured](paralympics.games.v1.SportManager.Featured)
type FeaturedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FeaturedRequest) Reset() {
	*x = FeaturedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturedRequest) ProtoMessage() {}

func (x *FeaturedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturedRequest.ProtoReflect.Descriptor instead.
func (*FeaturedRequest) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{14}
}

// Request for [Restore](paralympics.sports.v1.SportManager.Restore)
type RestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the sport to restore
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RestoreRequest) Reset() {
	*x = RestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRequest) ProtoMessage() {}

func (x *RestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRequest.ProtoReflect.Descriptor instead.
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{15}
}

func (x *RestoreRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [Restore](paralympics.sports.v1.SportManager.Restore)
type RestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The restored sport
	Sport *Sport `protobuf:"bytes,1,opt,name=sport,proto3" json:"sport,omitempty"`
}

func (x *RestoreResponse) Reset() {
	*x = RestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResponse) ProtoMessage() {}

func (x *RestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResponse.ProtoReflect.Descriptor instead.
func (*RestoreResponse) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{16}
}

func (x *RestoreResponse) GetSport() *Sport {
	if x != nil {
		return x.Sport
	}
	return nil
}

// Request for [Purge](paralympics.sports.v1.SportManager.Purge)
type PurgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the sport to restore
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PurgeRequest) Reset() {
	*x = PurgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRequest) ProtoMessage() {}

func (x *PurgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRequest.ProtoReflect.Descriptor instead.
func (*PurgeRequest) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{17}
}

func (x *PurgeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for [Purge](paralympics.sports.v1.SportManager.Purge)
type PurgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PurgeResponse) Reset() {
	*x = PurgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sports_v1_sport_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeResponse) ProtoMessage() {}

func (x *PurgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sports_v1_sport_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeResponse.ProtoReflect.Descriptor instead.
func (*PurgeResponse) Descriptor() ([]byte, []int) {
	return file_sports_v1_sport_proto_rawDescGZIP(), []int{18}
}

var File_sports_v1_sport_proto protoreflect.FileDescriptor

var file_sports_v1_sport_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe5, 0x05, 0x0a, 0x05, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x43, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a,
	0x08, 0x69, 0x6d, 0x67, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x69, 0x6d, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x07, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x4e,
	0x0a, 0x0f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x6d, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x67, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x61, 0x6c, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x41,
	0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x6f, 0x64, 0x79, 0x48, 0x74, 0x6d, 0x6c, 0x22, 0x31, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x53,
	0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x22, 0x0a, 0x10, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x12, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22,
	0x36, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4f,
	0x0a, 0x13, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x22,
	0x60, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x76, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x32, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x0f, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x34, 0x0a, 0x16, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x1e, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0x2a, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x2a,
	0x48, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x3b, 0x0a, 0x0e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x69, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x21, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x94, 0x01, 0x0a, 0x05, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x67, 0x43, 0x61, 0x72, 0x64, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x67, 0x48, 0x65, 0x72, 0x6f,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x10, 0x08,
	0x2a, 0x4e, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x55, 0x49, 0x44, 0x76, 0x34, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x52, 0x49, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x03,
	0x32, 0xfb, 0x07, 0x0a, 0x0c, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x54, 0x0a, 0x09, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x27,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x28, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x05, 0x50, 0x75, 0x72, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x65, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x0e, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x38,
	0x5a, 0x36, 0x67, 0x6f, 0x2e, 0x73, 0x6f, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f,
	0x62, 0x70, 0x61, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x3b, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sports_v1_sport_proto_rawDescOnce sync.Once
	file_sports_v1_sport_proto_rawDescData = file_sports_v1_sport_proto_rawDesc
)

func file_sports_v1_sport_proto_rawDescGZIP() []byte {
	file_sports_v1_sport_proto_rawDescOnce.Do(func() {
		file_sports_v1_sport_proto_rawDescData = protoimpl.X.CompressGZIP(file_sports_v1_sport_proto_rawDescData)
	})
	return file_sports_v1_sport_proto_rawDescData
}

var file_sports_v1_sport_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_sports_v1_sport_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_sports_v1_sport_proto_goTypes = []interface{}{
	(Season)(0),                    // 0: paralympics.sports.v1.Season
	(SortField)(0),                 // 1: paralympics.sports.v1.SortField
	(FeaturedFilter)(0),            // 2: paralympics.sports.v1.FeaturedFilter
	(SortDirection)(0),             // 3: paralympics.sports.v1.SortDirection
	(Field)(0),                     // 4: paralympics.sports.v1.Field
	(ErrorCode)(0),                 // 5: paralympics.sports.v1.ErrorCode
	(*Sport)(nil),                  // 6: paralympics.sports.v1.Sport
	(*ExtLink)(nil),                // 7: paralympics.sports.v1.ExtLink
	(*SortOption)(nil),             // 8: paralympics.sports.v1.SortOption
	(*Filter)(nil),                 // 9: paralympics.sports.v1.Filter
	(*SportByIDRequest)(nil),       // 10: paralympics.sports.v1.SportByIDRequest
	(*SportBySlugRequest)(nil),     // 11: paralympics.sports.v1.SportBySlugRequest
	(*Pagination)(nil),             // 12: paralympics.sports.v1.Pagination
	(*ListSportsRequest)(nil),      // 13: paralympics.sports.v1.ListSportsRequest
	(*SportContentRequest)(nil),    // 14: paralympics.sports.v1.SportContentRequest
	(*ListSportsResponse)(nil),     // 15: paralympics.sports.v1.ListSportsResponse
	(*FieldError)(nil),             // 16: paralympics.sports.v1.FieldError
	(*ValidationError)(nil),        // 17: paralympics.sports.v1.ValidationError
	(*ToggleFeaturedRequest)(nil),  // 18: paralympics.sports.v1.ToggleFeaturedRequest
	(*ToggleFeaturedResponse)(nil), // 19: paralympics.sports.v1.ToggleFeaturedResponse
	(*FeaturedRequest)(nil),        // 20: paralympics.sports.v1.FeaturedRequest
	(*RestoreRequest)(nil),         // 21: paralympics.sports.v1.RestoreRequest
	(*RestoreResponse)(nil),        // 22: paralympics.sports.v1.RestoreResponse
	(*PurgeRequest)(nil),           // 23: paralympics.sports.v1.PurgeRequest
	(*PurgeResponse)(nil),          // 24: paralympics.sports.v1.PurgeResponse
	(*timestamp.Timestamp)(nil),    // 25: google.protobuf.Timestamp
	(*v1.Image)(nil),               // 26: paralympics.content.v1.Image
	(*v11.SocialProfile)(nil),      // 27: paralympics.content.v1.SocialProfile
	(*v1.ContentModule)(nil),       // 28: paralympics.content.v1.ContentModule
	(*empty.Empty)(nil),            // 29: google.protobuf.Empty
}
var file_sports_v1_sport_proto_depIdxs = []int32{
	25, // 0: paralympics.sports.v1.Sport.create_date:type_name -> google.protobuf.Timestamp
	25, // 1: paralympics.sports.v1.Sport.update_date:type_name -> google.protobuf.Timestamp
	25, // 2: paralympics.sports.v1.Sport.delete_date:type_name -> google.protobuf.Timestamp
	0,  // 3: paralympics.sports.v1.Sport.season:type_name -> paralympics.sports.v1.Season
	26, // 4: paralympics.sports.v1.Sport.img_card:type_name -> paralympics.content.v1.Image
	26, // 5: paralympics.sports.v1.Sport.img_hero:type_name -> paralympics.content.v1.Image
	7,  // 6: paralympics.sports.v1.Sport.ext_link:type_name -> paralympics.sports.v1.ExtLink
	27, // 7: paralympics.sports.v1.Sport.social_profiles:type_name -> paralympics.content.v1.SocialProfile
	1,  // 8: paralympics.sports.v1.SortOption.field:type_name -> paralympics.sports.v1.SortField
	3,  // 9: paralympics.sports.v1.SortOption.direction:type_name -> paralympics.sports.v1.SortDirection
	0,  // 10: paralympics.sports.v1.Filter.season:type_name -> paralympics.sports.v1.Season
	2,  // 11: paralympics.sports.v1.Filter.featured:type_name -> paralympics.sports.v1.FeaturedFilter
	12, // 12: paralympics.sports.v1.ListSportsRequest.pagination:type_name -> paralympics.sports.v1.Pagination
	8,  // 13: paralympics.sports.v1.ListSportsRequest.sort:type_name -> paralympics.sports.v1.SortOption
	9,  // 14: paralympics.sports.v1.ListSportsRequest.filter:type_name -> paralympics.sports.v1.Filter
	6,  // 15: paralympics.sports.v1.ListSportsResponse.sports:type_name -> paralympics.sports.v1.Sport
	4,  // 16: paralympics.sports.v1.FieldError.field:type_name -> paralympics.sports.v1.Field
	5,  // 17: paralympics.sports.v1.FieldError.code:type_name -> paralympics.sports.v1.ErrorCode
	16, // 18: paralympics.sports.v1.ValidationError.errors:type_name -> paralympics.sports.v1.FieldError
	6,  // 19: paralympics.sports.v1.RestoreResponse.sport:type_name -> paralympics.sports.v1.Sport
	10, // 20: paralympics.sports.v1.SportManager.SportByID:input_type -> paralympics.sports.v1.SportByIDRequest
	11, // 21: paralympics.sports.v1.SportManager.SportBySlug:input_type -> paralympics.sports.v1.SportBySlugRequest
	13, // 22: paralympics.sports.v1.SportManager.ListSports:input_type -> paralympics.sports.v1.ListSportsRequest
	6,  // 23: paralympics.sports.v1.SportManager.PutSport:input_type -> paralympics.sports.v1.Sport
	6,  // 24: paralympics.sports.v1.SportManager.DeleteSport:input_type -> paralympics.sports.v1.Sport
	21, // 25: paralympics.sports.v1.SportManager.Restore:input_type -> paralympics.sports.v1.RestoreRequest
	23, // 26: paralympics.sports.v1.SportManager.Purge:input_type -> paralympics.sports.v1.PurgeRequest
	14, // 27: paralympics.sports.v1.SportManager.SportContent:input_type -> paralympics.sports.v1.SportContentRequest
	28, // 28: paralympics.sports.v1.SportManager.PutSportContent:input_type -> paralympics.content.v1.ContentModule
	18, // 29: paralympics.sports.v1.SportManager.ToggleFeatured:input_type -> paralympics.sports.v1.ToggleFeaturedRequest
	20, // 30: paralympics.sports.v1.SportManager.Featured:input_type -> paralympics.sports.v1.FeaturedRequest
	6,  // 31: paralympics.sports.v1.SportManager.SportByID:output_type -> paralympics.sports.v1.Sport
	6,  // 32: paralympics.sports.v1.SportManager.SportBySlug:output_type -> paralympics.sports.v1.Sport
	15, // 33: paralympics.sports.v1.SportManager.ListSports:output_type -> paralympics.sports.v1.ListSportsResponse
	6,  // 34: paralympics.sports.v1.SportManager.PutSport:output_type -> paralympics.sports.v1.Sport
	29, // 35: paralympics.sports.v1.SportManager.DeleteSport:output_type -> google.protobuf.Empty
	22, // 36: paralympics.sports.v1.SportManager.Restore:output_type -> paralympics.sports.v1.RestoreResponse
	24, // 37: paralympics.sports.v1.SportManager.Purge:output_type -> paralympics.sports.v1.PurgeResponse
	28, // 38: paralympics.sports.v1.SportManager.SportContent:output_type -> paralympics.content.v1.ContentModule
	28, // 39: paralympics.sports.v1.SportManager.PutSportContent:output_type -> paralympics.content.v1.ContentModule
	19, // 40: paralympics.sports.v1.SportManager.ToggleFeatured:output_type -> paralympics.sports.v1.ToggleFeaturedResponse
	6,  // 41: paralympics.sports.v1.SportManager.Featured:output_type -> paralympics.sports.v1.Sport
	31, // [31:42] is the sub-list for method output_type
	20, // [20:31] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_sports_v1_sport_proto_init() }
func file_sports_v1_sport_proto_init() {
	if File_sports_v1_sport_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sports_v1_sport_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportBySlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleFeaturedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleFeaturedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sports_v1_sport_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sports_v1_sport_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sports_v1_sport_proto_goTypes,
		DependencyIndexes: file_sports_v1_sport_proto_depIdxs,
		EnumInfos:         file_sports_v1_sport_proto_enumTypes,
		MessageInfos:      file_sports_v1_sport_proto_msgTypes,
	}.Build()
	File_sports_v1_sport_proto = out.File
	file_sports_v1_sport_proto_rawDesc = nil
	file_sports_v1_sport_proto_goTypes = nil
	file_sports_v1_sport_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SportManagerClient is the client API for SportManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SportManagerClient interface {
	// Gets a single Sport
	SportByID(ctx context.Context, in *SportByIDRequest, opts ...grpc.CallOption) (*Sport, error)
	SportBySlug(ctx context.Context, in *SportBySlugRequest, opts ...grpc.CallOption) (*Sport, error)
	// Lists all the Sports
	ListSports(ctx context.Context, in *ListSportsRequest, opts ...grpc.CallOption) (*ListSportsResponse, error)
	// Creates or Updates an Sport
	PutSport(ctx context.Context, in *Sport, opts ...grpc.CallOption) (*Sport, error)
	// Deletes an Sport
	DeleteSport(ctx context.Context, in *Sport, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore an article that is soft deleted
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
	// Purge hard deletes a sport and it's relations
	Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error)
	// List Sport content
	SportContent(ctx context.Context, in *SportContentRequest, opts ...grpc.CallOption) (SportManager_SportContentClient, error)
	// Creates or Updates Sport content
	PutSportContent(ctx context.Context, opts ...grpc.CallOption) (SportManager_PutSportContentClient, error)
	// ToggleFeatured toggles a sports featured status, if on it will be turned off, if off it will be turned on
	ToggleFeatured(ctx context.Context, in *ToggleFeaturedRequest, opts ...grpc.CallOption) (*ToggleFeaturedResponse, error)
	// Featured returns a stream of featured sports
	Featured(ctx context.Context, in *FeaturedRequest, opts ...grpc.CallOption) (SportManager_FeaturedClient, error)
}

type sportManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSportManagerClient(cc grpc.ClientConnInterface) SportManagerClient {
	return &sportManagerClient{cc}
}

func (c *sportManagerClient) SportByID(ctx context.Context, in *SportByIDRequest, opts ...grpc.CallOption) (*Sport, error) {
	out := new(Sport)
	err := c.cc.Invoke(ctx, "/paralympics.sports.v1.SportManager/SportByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportManagerClient) SportBySlug(ctx context.Context, in *SportBySlugRequest, opts ...grpc.CallOption) (*Sport, error) {
	out := new(Sport)
	err := c.cc.Invoke(ctx, "/paralympics.sports.v1.SportManager/SportBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportManagerClient) ListSports(ctx context.Context, in *ListSportsRequest, opts ...grpc.CallOption) (*ListSportsResponse, error) {
	out := new(ListSportsResponse)
	err := c.cc.Invoke(ctx, "/paralympics.sports.v1.SportManager/ListSports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportManagerClient) PutSport(ctx context.Context, in *Sport, opts ...grpc.CallOption) (*Sport, error) {
	out := new(Sport)
	err := c.cc.Invoke(ctx, "/paralympics.sports.v1.SportManager/PutSport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportManagerClient) DeleteSport(ctx context.Context, in *Sport, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/paralympics.sports.v1.SportManager/DeleteSport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportManagerClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	out := new(RestoreResponse)
	err := c.cc.Invoke(ctx, "/paralympics.sports.v1.SportManager/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportManagerClient) Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error) {
	out := new(PurgeResponse)
	err := c.cc.Invoke(ctx, "/paralympics.sports.v1.SportManager/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportManagerClient) SportContent(ctx context.Context, in *SportContentRequest, opts ...grpc.CallOption) (SportManager_SportContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SportManager_serviceDesc.Streams[0], "/paralympics.sports.v1.SportManager/SportContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &sportManagerSportContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SportManager_SportContentClient interface {
	Recv() (*v1.ContentModule, error)
	grpc.ClientStream
}

type sportManagerSportContentClient struct {
	grpc.ClientStream
}

func (x *sportManagerSportContentClient) Recv() (*v1.ContentModule, error) {
	m := new(v1.ContentModule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sportManagerClient) PutSportContent(ctx context.Context, opts ...grpc.CallOption) (SportManager_PutSportContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SportManager_serviceDesc.Streams[1], "/paralympics.sports.v1.SportManager/PutSportContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &sportManagerPutSportContentClient{stream}
	return x, nil
}

type SportManager_PutSportContentClient interface {
	Send(*v1.ContentModule) error
	Recv() (*v1.ContentModule, error)
	grpc.ClientStream
}

type sportManagerPutSportContentClient struct {
	grpc.ClientStream
}

func (x *sportManagerPutSportContentClient) Send(m *v1.ContentModule) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sportManagerPutSportContentClient) Recv() (*v1.ContentModule, error) {
	m := new(v1.ContentModule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sportManagerClient) ToggleFeatured(ctx context.Context, in *ToggleFeaturedRequest, opts ...grpc.CallOption) (*ToggleFeaturedResponse, error) {
	out := new(ToggleFeaturedResponse)
	err := c.cc.Invoke(ctx, "/paralympics.sports.v1.SportManager/ToggleFeatured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportManagerClient) Featured(ctx context.Context, in *FeaturedRequest, opts ...grpc.CallOption) (SportManager_FeaturedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SportManager_serviceDesc.Streams[2], "/paralympics.sports.v1.SportManager/Featured", opts...)
	if err != nil {
		return nil, err
	}
	x := &sportManagerFeaturedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SportManager_FeaturedClient interface {
	Recv() (*Sport, error)
	grpc.ClientStream
}

type sportManagerFeaturedClient struct {
	grpc.ClientStream
}

func (x *sportManagerFeaturedClient) Recv() (*Sport, error) {
	m := new(Sport)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SportManagerServer is the server API for SportManager service.
type SportManagerServer interface {
	// Gets a single Sport
	SportByID(context.Context, *SportByIDRequest) (*Sport, error)
	SportBySlug(context.Context, *SportBySlugRequest) (*Sport, error)
	// Lists all the Sports
	ListSports(context.Context, *ListSportsRequest) (*ListSportsResponse, error)
	// Creates or Updates an Sport
	PutSport(context.Context, *Sport) (*Sport, error)
	// Deletes an Sport
	DeleteSport(context.Context, *Sport) (*empty.Empty, error)
	// Restore an article that is soft deleted
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	// Purge hard deletes a sport and it's relations
	Purge(context.Context, *PurgeRequest) (*PurgeResponse, error)
	// List Sport content
	SportContent(*SportContentRequest, SportManager_SportContentServer) error
	// Creates or Updates Sport content
	PutSportContent(SportManager_PutSportContentServer) error
	// ToggleFeatured toggles a sports featured status, if on it will be turned off, if off it will be turned on
	ToggleFeatured(context.Context, *ToggleFeaturedRequest) (*ToggleFeaturedResponse, error)
	// Featured returns a stream of featured sports
	Featured(*FeaturedRequest, SportManager_FeaturedServer) error
}

// UnimplementedSportManagerServer can be embedded to have forward compatible implementations.
type UnimplementedSportManagerServer struct {
}

func (*UnimplementedSportManagerServer) SportByID(context.Context, *SportByIDRequest) (*Sport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SportByID not implemented")
}
func (*UnimplementedSportManagerServer) SportBySlug(context.Context, *SportBySlugRequest) (*Sport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SportBySlug not implemented")
}
func (*UnimplementedSportManagerServer) ListSports(context.Context, *ListSportsRequest) (*ListSportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSports not implemented")
}
func (*UnimplementedSportManagerServer) PutSport(context.Context, *Sport) (*Sport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSport not implemented")
}
func (*UnimplementedSportManagerServer) DeleteSport(context.Context, *Sport) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSport not implemented")
}
func (*UnimplementedSportManagerServer) Restore(context.Context, *RestoreRequest) (*RestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedSportManagerServer) Purge(context.Context, *PurgeRequest) (*PurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (*UnimplementedSportManagerServer) SportContent(*SportContentRequest, SportManager_SportContentServer) error {
	return status.Errorf(codes.Unimplemented, "method SportContent not implemented")
}
func (*UnimplementedSportManagerServer) PutSportContent(SportManager_PutSportContentServer) error {
	return status.Errorf(codes.Unimplemented, "method PutSportContent not implemented")
}
func (*UnimplementedSportManagerServer) ToggleFeatured(context.Context, *ToggleFeaturedRequest) (*ToggleFeaturedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFeatured not implemented")
}
func (*UnimplementedSportManagerServer) Featured(*FeaturedRequest, SportManager_FeaturedServer) error {
	return status.Errorf(codes.Unimplemented, "method Featured not implemented")
}

func RegisterSportManagerServer(s *grpc.Server, srv SportManagerServer) {
	s.RegisterService(&_SportManager_serviceDesc, srv)
}

func _SportManager_SportByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SportByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportManagerServer).SportByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.sports.v1.SportManager/SportByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportManagerServer).SportByID(ctx, req.(*SportByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportManager_SportBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SportBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportManagerServer).SportBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.sports.v1.SportManager/SportBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportManagerServer).SportBySlug(ctx, req.(*SportBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportManager_ListSports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportManagerServer).ListSports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.sports.v1.SportManager/ListSports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportManagerServer).ListSports(ctx, req.(*ListSportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportManager_PutSport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportManagerServer).PutSport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.sports.v1.SportManager/PutSport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportManagerServer).PutSport(ctx, req.(*Sport))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportManager_DeleteSport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportManagerServer).DeleteSport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.sports.v1.SportManager/DeleteSport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportManagerServer).DeleteSport(ctx, req.(*Sport))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportManager_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportManagerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.sports.v1.SportManager/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportManagerServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportManager_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportManagerServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.sports.v1.SportManager/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportManagerServer).Purge(ctx, req.(*PurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportManager_SportContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SportContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SportManagerServer).SportContent(m, &sportManagerSportContentServer{stream})
}

type SportManager_SportContentServer interface {
	Send(*v1.ContentModule) error
	grpc.ServerStream
}

type sportManagerSportContentServer struct {
	grpc.ServerStream
}

func (x *sportManagerSportContentServer) Send(m *v1.ContentModule) error {
	return x.ServerStream.SendMsg(m)
}

func _SportManager_PutSportContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SportManagerServer).PutSportContent(&sportManagerPutSportContentServer{stream})
}

type SportManager_PutSportContentServer interface {
	Send(*v1.ContentModule) error
	Recv() (*v1.ContentModule, error)
	grpc.ServerStream
}

type sportManagerPutSportContentServer struct {
	grpc.ServerStream
}

func (x *sportManagerPutSportContentServer) Send(m *v1.ContentModule) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sportManagerPutSportContentServer) Recv() (*v1.ContentModule, error) {
	m := new(v1.ContentModule)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SportManager_ToggleFeatured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFeaturedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportManagerServer).ToggleFeatured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.sports.v1.SportManager/ToggleFeatured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportManagerServer).ToggleFeatured(ctx, req.(*ToggleFeaturedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportManager_Featured_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FeaturedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SportManagerServer).Featured(m, &sportManagerFeaturedServer{stream})
}

type SportManager_FeaturedServer interface {
	Send(*Sport) error
	grpc.ServerStream
}

type sportManagerFeaturedServer struct {
	grpc.ServerStream
}

func (x *sportManagerFeaturedServer) Send(m *Sport) error {
	return x.ServerStream.SendMsg(m)
}

var _SportManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paralympics.sports.v1.SportManager",
	HandlerType: (*SportManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SportByID",
			Handler:    _SportManager_SportByID_Handler,
		},
		{
			MethodName: "SportBySlug",
			Handler:    _SportManager_SportBySlug_Handler,
		},
		{
			MethodName: "ListSports",
			Handler:    _SportManager_ListSports_Handler,
		},
		{
			MethodName: "PutSport",
			Handler:    _SportManager_PutSport_Handler,
		},
		{
			MethodName: "DeleteSport",
			Handler:    _SportManager_DeleteSport_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _SportManager_Restore_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _SportManager_Purge_Handler,
		},
		{
			MethodName: "ToggleFeatured",
			Handler:    _SportManager_ToggleFeatured_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SportContent",
			Handler:       _SportManager_SportContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutSportContent",
			Handler:       _SportManager_PutSportContent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Featured",
			Handler:       _SportManager_Featured_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sports/v1/sport.proto",
}
