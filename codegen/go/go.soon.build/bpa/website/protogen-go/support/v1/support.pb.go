// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: support/v1/support.proto

package support

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v11 "go.soon.build/bpa/website/protogen-go/articles/v1"
	v1 "go.soon.build/bpa/website/protogen-go/content/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of sort to apply, ascending or descending
type SortDirection int32

const (
	SortDirection_ASC SortDirection = 0
	SortDirection_DSC SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "ASC",
		1: "DSC",
	}
	SortDirection_value = map[string]int32{
		"ASC": 0,
		"DSC": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_support_v1_support_proto_enumTypes[0].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_support_v1_support_proto_enumTypes[0]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{0}
}

// Fields we can sort pages by
type SortField int32

const (
	SortField_CREATE_DATE SortField = 0
	SortField_UPDATE_DATE SortField = 1
	SortField_DELETE_DATE SortField = 2
	SortField_TITLE       SortField = 3
	SortField_ORDER       SortField = 4
)

// Enum value maps for SortField.
var (
	SortField_name = map[int32]string{
		0: "CREATE_DATE",
		1: "UPDATE_DATE",
		2: "DELETE_DATE",
		3: "TITLE",
		4: "ORDER",
	}
	SortField_value = map[string]int32{
		"CREATE_DATE": 0,
		"UPDATE_DATE": 1,
		"DELETE_DATE": 2,
		"TITLE":       3,
		"ORDER":       4,
	}
)

func (x SortField) Enum() *SortField {
	p := new(SortField)
	*p = x
	return p
}

func (x SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_support_v1_support_proto_enumTypes[1].Descriptor()
}

func (SortField) Type() protoreflect.EnumType {
	return &file_support_v1_support_proto_enumTypes[1]
}

func (x SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortField.Descriptor instead.
func (SortField) EnumDescriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{1}
}

// A SupportSection stored in the content service
type SupportSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug                string               `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Title               string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	CreateDate          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	UpdateDate          *timestamp.Timestamp `protobuf:"bytes,5,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	DeleteDate          *timestamp.Timestamp `protobuf:"bytes,6,opt,name=delete_date,json=deleteDate,proto3" json:"delete_date,omitempty"`
	HeroImg             *v1.Image            `protobuf:"bytes,7,opt,name=hero_img,json=heroImg,proto3" json:"hero_img,omitempty"`
	HeroImgAlt          string               `protobuf:"bytes,8,opt,name=hero_img_alt,json=heroImgAlt,proto3" json:"hero_img_alt,omitempty"`
	HeroText            string               `protobuf:"bytes,9,opt,name=hero_text,json=heroText,proto3" json:"hero_text,omitempty"`
	ArticleCategory     v11.Category         `protobuf:"varint,10,opt,name=article_category,json=articleCategory,proto3,enum=paralympics.articles.v1.Category" json:"article_category,omitempty"`
	IntroChapterHeading string               `protobuf:"bytes,11,opt,name=intro_chapter_heading,json=introChapterHeading,proto3" json:"intro_chapter_heading,omitempty"`
	IntroLead           string               `protobuf:"bytes,12,opt,name=intro_lead,json=introLead,proto3" json:"intro_lead,omitempty"`
	IntroText           string               `protobuf:"bytes,13,opt,name=intro_text,json=introText,proto3" json:"intro_text,omitempty"`
	IntroTextHtml       string               `protobuf:"bytes,16,opt,name=intro_text_html,json=introTextHtml,proto3" json:"intro_text_html,omitempty"`
	// Deprecated: Marked as deprecated in support/v1/support.proto.
	IntroLink      string `protobuf:"bytes,14,opt,name=intro_link,json=introLink,proto3" json:"intro_link,omitempty"`
	IntroArticleId string `protobuf:"bytes,17,opt,name=intro_article_id,json=introArticleId,proto3" json:"intro_article_id,omitempty"`
	Order          int64  `protobuf:"varint,15,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SupportSection) Reset() {
	*x = SupportSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_support_v1_support_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportSection) ProtoMessage() {}

func (x *SupportSection) ProtoReflect() protoreflect.Message {
	mi := &file_support_v1_support_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportSection.ProtoReflect.Descriptor instead.
func (*SupportSection) Descriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{0}
}

func (x *SupportSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SupportSection) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *SupportSection) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SupportSection) GetCreateDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *SupportSection) GetUpdateDate() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *SupportSection) GetDeleteDate() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteDate
	}
	return nil
}

func (x *SupportSection) GetHeroImg() *v1.Image {
	if x != nil {
		return x.HeroImg
	}
	return nil
}

func (x *SupportSection) GetHeroImgAlt() string {
	if x != nil {
		return x.HeroImgAlt
	}
	return ""
}

func (x *SupportSection) GetHeroText() string {
	if x != nil {
		return x.HeroText
	}
	return ""
}

func (x *SupportSection) GetArticleCategory() v11.Category {
	if x != nil {
		return x.ArticleCategory
	}
	return v11.Category(0)
}

func (x *SupportSection) GetIntroChapterHeading() string {
	if x != nil {
		return x.IntroChapterHeading
	}
	return ""
}

func (x *SupportSection) GetIntroLead() string {
	if x != nil {
		return x.IntroLead
	}
	return ""
}

func (x *SupportSection) GetIntroText() string {
	if x != nil {
		return x.IntroText
	}
	return ""
}

func (x *SupportSection) GetIntroTextHtml() string {
	if x != nil {
		return x.IntroTextHtml
	}
	return ""
}

// Deprecated: Marked as deprecated in support/v1/support.proto.
func (x *SupportSection) GetIntroLink() string {
	if x != nil {
		return x.IntroLink
	}
	return ""
}

func (x *SupportSection) GetIntroArticleId() string {
	if x != nil {
		return x.IntroArticleId
	}
	return ""
}

func (x *SupportSection) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

// Request for the `SectionByID` method
type SectionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SectionByIDRequest) Reset() {
	*x = SectionByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_support_v1_support_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionByIDRequest) ProtoMessage() {}

func (x *SectionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_support_v1_support_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionByIDRequest.ProtoReflect.Descriptor instead.
func (*SectionByIDRequest) Descriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{1}
}

func (x *SectionByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request for the `SectionBySlug` method
type SectionBySlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *SectionBySlugRequest) Reset() {
	*x = SectionBySlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_support_v1_support_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionBySlugRequest) ProtoMessage() {}

func (x *SectionBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_support_v1_support_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionBySlugRequest.ProtoReflect.Descriptor instead.
func (*SectionBySlugRequest) Descriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{2}
}

func (x *SectionBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

// Pagination
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_support_v1_support_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_support_v1_support_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{3}
}

func (x *Pagination) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Sort field + sort direction
type SortOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     SortField     `protobuf:"varint,1,opt,name=field,proto3,enum=paralympics.support.v1.SortField" json:"field,omitempty"`
	Direction SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=paralympics.support.v1.SortDirection" json:"direction,omitempty"`
}

func (x *SortOption) Reset() {
	*x = SortOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_support_v1_support_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOption) ProtoMessage() {}

func (x *SortOption) ProtoReflect() protoreflect.Message {
	mi := &file_support_v1_support_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOption.ProtoReflect.Descriptor instead.
func (*SortOption) Descriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{4}
}

func (x *SortOption) GetField() SortField {
	if x != nil {
		return x.Field
	}
	return SortField_CREATE_DATE
}

func (x *SortOption) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_ASC
}

// Fields we can filter pages by
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search by deleted state
	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Search by article category
	Category v11.Category `protobuf:"varint,2,opt,name=category,proto3,enum=paralympics.articles.v1.Category" json:"category,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_support_v1_support_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_support_v1_support_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{5}
}

func (x *Filter) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Filter) GetCategory() v11.Category {
	if x != nil {
		return x.Category
	}
	return v11.Category(0)
}

// Get paginaged list of Sections
type ListSectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination   `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"` // Paginated response
	Sort       []*SortOption `protobuf:"bytes,2,rep,name=sort,proto3" json:"sort,omitempty"`             // Sort response
	Filter     *Filter       `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`         // Filter pages
}

func (x *ListSectionsRequest) Reset() {
	*x = ListSectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_support_v1_support_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSectionsRequest) ProtoMessage() {}

func (x *ListSectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_support_v1_support_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSectionsRequest.ProtoReflect.Descriptor instead.
func (*ListSectionsRequest) Descriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{6}
}

func (x *ListSectionsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListSectionsRequest) GetSort() []*SortOption {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListSectionsRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Response for ListSections
type ListSectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sections []*SupportSection `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
	Total    int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // Total number of pages that match the search
}

func (x *ListSectionsResponse) Reset() {
	*x = ListSectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_support_v1_support_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSectionsResponse) ProtoMessage() {}

func (x *ListSectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_support_v1_support_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSectionsResponse.ProtoReflect.Descriptor instead.
func (*ListSectionsResponse) Descriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{7}
}

func (x *ListSectionsResponse) GetSections() []*SupportSection {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *ListSectionsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Request for reordering a support section
type ReorderSectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int64  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ReorderSectionRequest) Reset() {
	*x = ReorderSectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_support_v1_support_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReorderSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReorderSectionRequest) ProtoMessage() {}

func (x *ReorderSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_support_v1_support_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReorderSectionRequest.ProtoReflect.Descriptor instead.
func (*ReorderSectionRequest) Descriptor() ([]byte, []int) {
	return file_support_v1_support_proto_rawDescGZIP(), []int{8}
}

func (x *ReorderSectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReorderSectionRequest) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

var File_support_v1_support_proto protoreflect.FileDescriptor

var file_support_v1_support_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x05, 0x0a, 0x0e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f,
	0x49, 0x6d, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x6d, 0x67, 0x5f,
	0x61, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x49,
	0x6d, 0x67, 0x41, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x0f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x6c, 0x65,
	0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x4c,
	0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x21, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x24, 0x0a,
	0x12, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22,
	0x36, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x43, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3d, 0x0a, 0x15, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2a, 0x21, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x54, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x32, 0xd9, 0x04,
	0x0a, 0x0e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x63, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x2a, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69,
	0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b,
	0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0a, 0x50,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x0e, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x6f, 0x2e,
	0x73, 0x6f, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x62, 0x70, 0x61, 0x2f, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d,
	0x67, 0x6f, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_support_v1_support_proto_rawDescOnce sync.Once
	file_support_v1_support_proto_rawDescData = file_support_v1_support_proto_rawDesc
)

func file_support_v1_support_proto_rawDescGZIP() []byte {
	file_support_v1_support_proto_rawDescOnce.Do(func() {
		file_support_v1_support_proto_rawDescData = protoimpl.X.CompressGZIP(file_support_v1_support_proto_rawDescData)
	})
	return file_support_v1_support_proto_rawDescData
}

var file_support_v1_support_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_support_v1_support_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_support_v1_support_proto_goTypes = []interface{}{
	(SortDirection)(0),            // 0: paralympics.support.v1.SortDirection
	(SortField)(0),                // 1: paralympics.support.v1.SortField
	(*SupportSection)(nil),        // 2: paralympics.support.v1.SupportSection
	(*SectionByIDRequest)(nil),    // 3: paralympics.support.v1.SectionByIDRequest
	(*SectionBySlugRequest)(nil),  // 4: paralympics.support.v1.SectionBySlugRequest
	(*Pagination)(nil),            // 5: paralympics.support.v1.Pagination
	(*SortOption)(nil),            // 6: paralympics.support.v1.SortOption
	(*Filter)(nil),                // 7: paralympics.support.v1.Filter
	(*ListSectionsRequest)(nil),   // 8: paralympics.support.v1.ListSectionsRequest
	(*ListSectionsResponse)(nil),  // 9: paralympics.support.v1.ListSectionsResponse
	(*ReorderSectionRequest)(nil), // 10: paralympics.support.v1.ReorderSectionRequest
	(*timestamp.Timestamp)(nil),   // 11: google.protobuf.Timestamp
	(*v1.Image)(nil),              // 12: paralympics.content.v1.Image
	(v11.Category)(0),             // 13: paralympics.articles.v1.Category
	(*empty.Empty)(nil),           // 14: google.protobuf.Empty
}
var file_support_v1_support_proto_depIdxs = []int32{
	11, // 0: paralympics.support.v1.SupportSection.create_date:type_name -> google.protobuf.Timestamp
	11, // 1: paralympics.support.v1.SupportSection.update_date:type_name -> google.protobuf.Timestamp
	11, // 2: paralympics.support.v1.SupportSection.delete_date:type_name -> google.protobuf.Timestamp
	12, // 3: paralympics.support.v1.SupportSection.hero_img:type_name -> paralympics.content.v1.Image
	13, // 4: paralympics.support.v1.SupportSection.article_category:type_name -> paralympics.articles.v1.Category
	1,  // 5: paralympics.support.v1.SortOption.field:type_name -> paralympics.support.v1.SortField
	0,  // 6: paralympics.support.v1.SortOption.direction:type_name -> paralympics.support.v1.SortDirection
	13, // 7: paralympics.support.v1.Filter.category:type_name -> paralympics.articles.v1.Category
	5,  // 8: paralympics.support.v1.ListSectionsRequest.pagination:type_name -> paralympics.support.v1.Pagination
	6,  // 9: paralympics.support.v1.ListSectionsRequest.sort:type_name -> paralympics.support.v1.SortOption
	7,  // 10: paralympics.support.v1.ListSectionsRequest.filter:type_name -> paralympics.support.v1.Filter
	2,  // 11: paralympics.support.v1.ListSectionsResponse.sections:type_name -> paralympics.support.v1.SupportSection
	3,  // 12: paralympics.support.v1.SupportManager.SectionByID:input_type -> paralympics.support.v1.SectionByIDRequest
	4,  // 13: paralympics.support.v1.SupportManager.SectionBySlug:input_type -> paralympics.support.v1.SectionBySlugRequest
	8,  // 14: paralympics.support.v1.SupportManager.ListSections:input_type -> paralympics.support.v1.ListSectionsRequest
	2,  // 15: paralympics.support.v1.SupportManager.PutSection:input_type -> paralympics.support.v1.SupportSection
	2,  // 16: paralympics.support.v1.SupportManager.DeleteSection:input_type -> paralympics.support.v1.SupportSection
	10, // 17: paralympics.support.v1.SupportManager.ReorderSection:input_type -> paralympics.support.v1.ReorderSectionRequest
	2,  // 18: paralympics.support.v1.SupportManager.SectionByID:output_type -> paralympics.support.v1.SupportSection
	2,  // 19: paralympics.support.v1.SupportManager.SectionBySlug:output_type -> paralympics.support.v1.SupportSection
	9,  // 20: paralympics.support.v1.SupportManager.ListSections:output_type -> paralympics.support.v1.ListSectionsResponse
	2,  // 21: paralympics.support.v1.SupportManager.PutSection:output_type -> paralympics.support.v1.SupportSection
	14, // 22: paralympics.support.v1.SupportManager.DeleteSection:output_type -> google.protobuf.Empty
	14, // 23: paralympics.support.v1.SupportManager.ReorderSection:output_type -> google.protobuf.Empty
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_support_v1_support_proto_init() }
func file_support_v1_support_proto_init() {
	if File_support_v1_support_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_support_v1_support_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_support_v1_support_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectionByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_support_v1_support_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectionBySlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_support_v1_support_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_support_v1_support_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_support_v1_support_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_support_v1_support_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_support_v1_support_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_support_v1_support_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReorderSectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_support_v1_support_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_support_v1_support_proto_goTypes,
		DependencyIndexes: file_support_v1_support_proto_depIdxs,
		EnumInfos:         file_support_v1_support_proto_enumTypes,
		MessageInfos:      file_support_v1_support_proto_msgTypes,
	}.Build()
	File_support_v1_support_proto = out.File
	file_support_v1_support_proto_rawDesc = nil
	file_support_v1_support_proto_goTypes = nil
	file_support_v1_support_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SupportManagerClient is the client API for SupportManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SupportManagerClient interface {
	// Get a support section by it's unique by UUID
	SectionByID(ctx context.Context, in *SectionByIDRequest, opts ...grpc.CallOption) (*SupportSection, error)
	// Get a support section by it's unique slug
	SectionBySlug(ctx context.Context, in *SectionBySlugRequest, opts ...grpc.CallOption) (*SupportSection, error)
	// Lists all the Support Sections
	ListSections(ctx context.Context, in *ListSectionsRequest, opts ...grpc.CallOption) (*ListSectionsResponse, error)
	// Creates or Updates a support section
	PutSection(ctx context.Context, in *SupportSection, opts ...grpc.CallOption) (*SupportSection, error)
	// Deletes a support section
	DeleteSection(ctx context.Context, in *SupportSection, opts ...grpc.CallOption) (*empty.Empty, error)
	// Reorders support sections
	ReorderSection(ctx context.Context, in *ReorderSectionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type supportManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportManagerClient(cc grpc.ClientConnInterface) SupportManagerClient {
	return &supportManagerClient{cc}
}

func (c *supportManagerClient) SectionByID(ctx context.Context, in *SectionByIDRequest, opts ...grpc.CallOption) (*SupportSection, error) {
	out := new(SupportSection)
	err := c.cc.Invoke(ctx, "/paralympics.support.v1.SupportManager/SectionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportManagerClient) SectionBySlug(ctx context.Context, in *SectionBySlugRequest, opts ...grpc.CallOption) (*SupportSection, error) {
	out := new(SupportSection)
	err := c.cc.Invoke(ctx, "/paralympics.support.v1.SupportManager/SectionBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportManagerClient) ListSections(ctx context.Context, in *ListSectionsRequest, opts ...grpc.CallOption) (*ListSectionsResponse, error) {
	out := new(ListSectionsResponse)
	err := c.cc.Invoke(ctx, "/paralympics.support.v1.SupportManager/ListSections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportManagerClient) PutSection(ctx context.Context, in *SupportSection, opts ...grpc.CallOption) (*SupportSection, error) {
	out := new(SupportSection)
	err := c.cc.Invoke(ctx, "/paralympics.support.v1.SupportManager/PutSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportManagerClient) DeleteSection(ctx context.Context, in *SupportSection, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/paralympics.support.v1.SupportManager/DeleteSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportManagerClient) ReorderSection(ctx context.Context, in *ReorderSectionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/paralympics.support.v1.SupportManager/ReorderSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupportManagerServer is the server API for SupportManager service.
type SupportManagerServer interface {
	// Get a support section by it's unique by UUID
	SectionByID(context.Context, *SectionByIDRequest) (*SupportSection, error)
	// Get a support section by it's unique slug
	SectionBySlug(context.Context, *SectionBySlugRequest) (*SupportSection, error)
	// Lists all the Support Sections
	ListSections(context.Context, *ListSectionsRequest) (*ListSectionsResponse, error)
	// Creates or Updates a support section
	PutSection(context.Context, *SupportSection) (*SupportSection, error)
	// Deletes a support section
	DeleteSection(context.Context, *SupportSection) (*empty.Empty, error)
	// Reorders support sections
	ReorderSection(context.Context, *ReorderSectionRequest) (*empty.Empty, error)
}

// UnimplementedSupportManagerServer can be embedded to have forward compatible implementations.
type UnimplementedSupportManagerServer struct {
}

func (*UnimplementedSupportManagerServer) SectionByID(context.Context, *SectionByIDRequest) (*SupportSection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SectionByID not implemented")
}
func (*UnimplementedSupportManagerServer) SectionBySlug(context.Context, *SectionBySlugRequest) (*SupportSection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SectionBySlug not implemented")
}
func (*UnimplementedSupportManagerServer) ListSections(context.Context, *ListSectionsRequest) (*ListSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSections not implemented")
}
func (*UnimplementedSupportManagerServer) PutSection(context.Context, *SupportSection) (*SupportSection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSection not implemented")
}
func (*UnimplementedSupportManagerServer) DeleteSection(context.Context, *SupportSection) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSection not implemented")
}
func (*UnimplementedSupportManagerServer) ReorderSection(context.Context, *ReorderSectionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderSection not implemented")
}

func RegisterSupportManagerServer(s *grpc.Server, srv SupportManagerServer) {
	s.RegisterService(&_SupportManager_serviceDesc, srv)
}

func _SupportManager_SectionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportManagerServer).SectionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.support.v1.SupportManager/SectionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportManagerServer).SectionByID(ctx, req.(*SectionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportManager_SectionBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportManagerServer).SectionBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.support.v1.SupportManager/SectionBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportManagerServer).SectionBySlug(ctx, req.(*SectionBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportManager_ListSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportManagerServer).ListSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.support.v1.SupportManager/ListSections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportManagerServer).ListSections(ctx, req.(*ListSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportManager_PutSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportSection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportManagerServer).PutSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.support.v1.SupportManager/PutSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportManagerServer).PutSection(ctx, req.(*SupportSection))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportManager_DeleteSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportSection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportManagerServer).DeleteSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.support.v1.SupportManager/DeleteSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportManagerServer).DeleteSection(ctx, req.(*SupportSection))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportManager_ReorderSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportManagerServer).ReorderSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.support.v1.SupportManager/ReorderSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportManagerServer).ReorderSection(ctx, req.(*ReorderSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SupportManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paralympics.support.v1.SupportManager",
	HandlerType: (*SupportManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SectionByID",
			Handler:    _SupportManager_SectionByID_Handler,
		},
		{
			MethodName: "SectionBySlug",
			Handler:    _SupportManager_SectionBySlug_Handler,
		},
		{
			MethodName: "ListSections",
			Handler:    _SupportManager_ListSections_Handler,
		},
		{
			MethodName: "PutSection",
			Handler:    _SupportManager_PutSection_Handler,
		},
		{
			MethodName: "DeleteSection",
			Handler:    _SupportManager_DeleteSection_Handler,
		},
		{
			MethodName: "ReorderSection",
			Handler:    _SupportManager_ReorderSection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "support/v1/support.proto",
}
