// Preview token authentication
// Handles generating and validating JWT based preview tokens
// These tokens are primarily used for previewing unpublished content
// on the frontend

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: auth/v1/preview.proto

package preview

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types of subject we can preview - we can easily append
// to this as and when we need to add more
type SubjectType int32

const (
	SubjectType_Article SubjectType = 0
)

// Enum value maps for SubjectType.
var (
	SubjectType_name = map[int32]string{
		0: "Article",
	}
	SubjectType_value = map[string]int32{
		"Article": 0,
	}
)

func (x SubjectType) Enum() *SubjectType {
	p := new(SubjectType)
	*p = x
	return p
}

func (x SubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_v1_preview_proto_enumTypes[0].Descriptor()
}

func (SubjectType) Type() protoreflect.EnumType {
	return &file_auth_v1_preview_proto_enumTypes[0]
}

func (x SubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectType.Descriptor instead.
func (SubjectType) EnumDescriptor() ([]byte, []int) {
	return file_auth_v1_preview_proto_rawDescGZIP(), []int{0}
}

// Request for [GenerateToken](paralympics.preview.v1.PreviewAuthenticator.GenerateToken)
type GenerateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of subject we wish to preview, e.g Article
	Type SubjectType `protobuf:"varint,1,opt,name=type,proto3,enum=paralympics.preview.v1.SubjectType" json:"type,omitempty"`
	// The subject we wish to preview, this maybe an article or another
	// piece of unpublished content - this will usually be a uuid
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *GenerateTokenRequest) Reset() {
	*x = GenerateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_preview_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTokenRequest) ProtoMessage() {}

func (x *GenerateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_preview_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTokenRequest.ProtoReflect.Descriptor instead.
func (*GenerateTokenRequest) Descriptor() ([]byte, []int) {
	return file_auth_v1_preview_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateTokenRequest) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_Article
}

func (x *GenerateTokenRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

// Response for [GenerateToken](paralympics.preview.v1.PreviewAuthenticator.GenerateToken)
type GenerateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The generated token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// The time the token will expire
	Expire *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *GenerateTokenResponse) Reset() {
	*x = GenerateTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_preview_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTokenResponse) ProtoMessage() {}

func (x *GenerateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_preview_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTokenResponse.ProtoReflect.Descriptor instead.
func (*GenerateTokenResponse) Descriptor() ([]byte, []int) {
	return file_auth_v1_preview_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GenerateTokenResponse) GetExpire() *timestamp.Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

// Request for [ValidateToken](paralympics.preview.v1.PreviewAuthenticator.ValidateToken)
type ValidateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of thing we are validating the token for
	Type SubjectType `protobuf:"varint,1,opt,name=type,proto3,enum=paralympics.preview.v1.SubjectType" json:"type,omitempty"`
	// The subject we the token should be for
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// The token to validate
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ValidateTokenRequest) Reset() {
	*x = ValidateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_v1_preview_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTokenRequest) ProtoMessage() {}

func (x *ValidateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_v1_preview_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTokenRequest.ProtoReflect.Descriptor instead.
func (*ValidateTokenRequest) Descriptor() ([]byte, []int) {
	return file_auth_v1_preview_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateTokenRequest) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_Article
}

func (x *ValidateTokenRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ValidateTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_auth_v1_preview_proto protoreflect.FileDescriptor

var file_auth_v1_preview_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a,
	0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x7f, 0x0a, 0x14, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x1a, 0x0a, 0x0b,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x10, 0x00, 0x32, 0xdf, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x6e, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x6f,
	0x2e, 0x73, 0x6f, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x62, 0x70, 0x61, 0x2f,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_auth_v1_preview_proto_rawDescOnce sync.Once
	file_auth_v1_preview_proto_rawDescData = file_auth_v1_preview_proto_rawDesc
)

func file_auth_v1_preview_proto_rawDescGZIP() []byte {
	file_auth_v1_preview_proto_rawDescOnce.Do(func() {
		file_auth_v1_preview_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_v1_preview_proto_rawDescData)
	})
	return file_auth_v1_preview_proto_rawDescData
}

var file_auth_v1_preview_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_auth_v1_preview_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_auth_v1_preview_proto_goTypes = []interface{}{
	(SubjectType)(0),              // 0: paralympics.preview.v1.SubjectType
	(*GenerateTokenRequest)(nil),  // 1: paralympics.preview.v1.GenerateTokenRequest
	(*GenerateTokenResponse)(nil), // 2: paralympics.preview.v1.GenerateTokenResponse
	(*ValidateTokenRequest)(nil),  // 3: paralympics.preview.v1.ValidateTokenRequest
	(*timestamp.Timestamp)(nil),   // 4: google.protobuf.Timestamp
	(*empty.Empty)(nil),           // 5: google.protobuf.Empty
}
var file_auth_v1_preview_proto_depIdxs = []int32{
	0, // 0: paralympics.preview.v1.GenerateTokenRequest.type:type_name -> paralympics.preview.v1.SubjectType
	4, // 1: paralympics.preview.v1.GenerateTokenResponse.expire:type_name -> google.protobuf.Timestamp
	0, // 2: paralympics.preview.v1.ValidateTokenRequest.type:type_name -> paralympics.preview.v1.SubjectType
	1, // 3: paralympics.preview.v1.PreviewAuthenticator.GenerateToken:input_type -> paralympics.preview.v1.GenerateTokenRequest
	3, // 4: paralympics.preview.v1.PreviewAuthenticator.ValidateToken:input_type -> paralympics.preview.v1.ValidateTokenRequest
	2, // 5: paralympics.preview.v1.PreviewAuthenticator.GenerateToken:output_type -> paralympics.preview.v1.GenerateTokenResponse
	5, // 6: paralympics.preview.v1.PreviewAuthenticator.ValidateToken:output_type -> google.protobuf.Empty
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_auth_v1_preview_proto_init() }
func file_auth_v1_preview_proto_init() {
	if File_auth_v1_preview_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auth_v1_preview_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_preview_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_v1_preview_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_v1_preview_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auth_v1_preview_proto_goTypes,
		DependencyIndexes: file_auth_v1_preview_proto_depIdxs,
		EnumInfos:         file_auth_v1_preview_proto_enumTypes,
		MessageInfos:      file_auth_v1_preview_proto_msgTypes,
	}.Build()
	File_auth_v1_preview_proto = out.File
	file_auth_v1_preview_proto_rawDesc = nil
	file_auth_v1_preview_proto_goTypes = nil
	file_auth_v1_preview_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PreviewAuthenticatorClient is the client API for PreviewAuthenticator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PreviewAuthenticatorClient interface {
	// Generates a new preview token
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	// Validates a token
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type previewAuthenticatorClient struct {
	cc grpc.ClientConnInterface
}

func NewPreviewAuthenticatorClient(cc grpc.ClientConnInterface) PreviewAuthenticatorClient {
	return &previewAuthenticatorClient{cc}
}

func (c *previewAuthenticatorClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, "/paralympics.preview.v1.PreviewAuthenticator/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *previewAuthenticatorClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/paralympics.preview.v1.PreviewAuthenticator/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreviewAuthenticatorServer is the server API for PreviewAuthenticator service.
type PreviewAuthenticatorServer interface {
	// Generates a new preview token
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	// Validates a token
	ValidateToken(context.Context, *ValidateTokenRequest) (*empty.Empty, error)
}

// UnimplementedPreviewAuthenticatorServer can be embedded to have forward compatible implementations.
type UnimplementedPreviewAuthenticatorServer struct {
}

func (*UnimplementedPreviewAuthenticatorServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (*UnimplementedPreviewAuthenticatorServer) ValidateToken(context.Context, *ValidateTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}

func RegisterPreviewAuthenticatorServer(s *grpc.Server, srv PreviewAuthenticatorServer) {
	s.RegisterService(&_PreviewAuthenticator_serviceDesc, srv)
}

func _PreviewAuthenticator_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreviewAuthenticatorServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.preview.v1.PreviewAuthenticator/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreviewAuthenticatorServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreviewAuthenticator_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreviewAuthenticatorServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paralympics.preview.v1.PreviewAuthenticator/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreviewAuthenticatorServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PreviewAuthenticator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paralympics.preview.v1.PreviewAuthenticator",
	HandlerType: (*PreviewAuthenticatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _PreviewAuthenticator_GenerateToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _PreviewAuthenticator_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/v1/preview.proto",
}
